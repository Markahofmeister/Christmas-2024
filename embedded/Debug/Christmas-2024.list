
Christmas-2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003678  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003734  08003734  00004734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e8  080037e8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080037e8  080037e8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037e8  080037e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  080037fc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080037fc  0000520c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d53b  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002231  00000000  00000000  0001256f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000147a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b54  00000000  00000000  00015630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e90  00000000  00000000  00016184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106c9  00000000  00000000  0002c014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d753  00000000  00000000  0003c6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9e30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003480  00000000  00000000  000c9e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000cd2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800371c 	.word	0x0800371c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800371c 	.word	0x0800371c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		HAL_Init();
 8000220:	f000 fd3c 	bl	8000c9c <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8000224:	f000 f810 	bl	8000248 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000228:	f000 fa36 	bl	8000698 <MX_GPIO_Init>
	  MX_DMA_Init();
 800022c:	f000 fa16 	bl	800065c <MX_DMA_Init>
	  MX_I2S1_Init();
 8000230:	f000 f862 	bl	80002f8 <MX_I2S1_Init>
	  MX_SPI2_Init();
 8000234:	f000 f88a 	bl	800034c <MX_SPI2_Init>
	  MX_TIM1_Init();
 8000238:	f000 f8c6 	bl	80003c8 <MX_TIM1_Init>
	  MX_TIM3_Init();
 800023c:	f000 f97c 	bl	8000538 <MX_TIM3_Init>
	  MX_TIM14_Init();
 8000240:	f000 f9e6 	bl	8000610 <MX_TIM14_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1)
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	e7fd      	b.n	8000244 <main+0x28>

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b093      	sub	sp, #76	@ 0x4c
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2410      	movs	r4, #16
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2338      	movs	r3, #56	@ 0x38
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f003 fa33 	bl	80036c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	003b      	movs	r3, r7
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f003 fa2c 	bl	80036c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026c:	2380      	movs	r3, #128	@ 0x80
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f001 fa7b 	bl	800176c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2280      	movs	r2, #128	@ 0x80
 8000280:	0252      	lsls	r2, r2, #9
 8000282:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	0021      	movs	r1, r4
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2202      	movs	r2, #2
 800028a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2203      	movs	r2, #3
 8000290:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2208      	movs	r2, #8
 800029c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	22c0      	movs	r2, #192	@ 0xc0
 80002a2:	02d2      	lsls	r2, r2, #11
 80002a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	22c0      	movs	r2, #192	@ 0xc0
 80002aa:	04d2      	lsls	r2, r2, #19
 80002ac:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2280      	movs	r2, #128	@ 0x80
 80002b2:	0592      	lsls	r2, r2, #22
 80002b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 faa3 	bl	8001804 <HAL_RCC_OscConfig>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002c2:	f000 fa97 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	003b      	movs	r3, r7
 80002c8:	2207      	movs	r2, #7
 80002ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	003b      	movs	r3, r7
 80002ce:	2202      	movs	r2, #2
 80002d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	003b      	movs	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d8:	003b      	movs	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002de:	003b      	movs	r3, r7
 80002e0:	2102      	movs	r1, #2
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 fda8 	bl	8001e38 <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80002ec:	f000 fa82 	bl	80007f4 <Error_Handler>
  }
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b013      	add	sp, #76	@ 0x4c
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80002fc:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <MX_I2S1_Init+0x48>)
 80002fe:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <MX_I2S1_Init+0x4c>)
 8000300:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <MX_I2S1_Init+0x48>)
 8000304:	2280      	movs	r2, #128	@ 0x80
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800030a:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <MX_I2S1_Init+0x48>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000310:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <MX_I2S1_Init+0x48>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000316:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <MX_I2S1_Init+0x48>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800031c:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <MX_I2S1_Init+0x48>)
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <MX_I2S1_Init+0x50>)
 8000320:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000322:	4b07      	ldr	r3, [pc, #28]	@ (8000340 <MX_I2S1_Init+0x48>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000328:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <MX_I2S1_Init+0x48>)
 800032a:	0018      	movs	r0, r3
 800032c:	f001 f928 	bl	8001580 <HAL_I2S_Init>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8000334:	f000 fa5e 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	20000028 	.word	0x20000028
 8000344:	40013000 	.word	0x40013000
 8000348:	0000ac44 	.word	0x0000ac44

0800034c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000350:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000352:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <MX_SPI2_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000356:	4b1a      	ldr	r3, [pc, #104]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000358:	2282      	movs	r2, #130	@ 0x82
 800035a:	0052      	lsls	r2, r2, #1
 800035c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800035e:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000366:	22e0      	movs	r2, #224	@ 0xe0
 8000368:	00d2      	lsls	r2, r2, #3
 800036a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800036c:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_SPI2_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000372:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000378:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <MX_SPI2_Init+0x74>)
 800037a:	2280      	movs	r2, #128	@ 0x80
 800037c:	0092      	lsls	r2, r2, #2
 800037e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000380:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000382:	2208      	movs	r2, #8
 8000384:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000386:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800038c:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <MX_SPI2_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <MX_SPI2_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000398:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <MX_SPI2_Init+0x74>)
 800039a:	2207      	movs	r2, #7
 800039c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800039e:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <MX_SPI2_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <MX_SPI2_Init+0x74>)
 80003a6:	2208      	movs	r2, #8
 80003a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003aa:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <MX_SPI2_Init+0x74>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f002 fafd 	bl	80029ac <HAL_SPI_Init>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80003b6:	f000 fa1d 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000c0 	.word	0x200000c0
 80003c4:	40003800 	.word	0x40003800

080003c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b098      	sub	sp, #96	@ 0x60
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ce:	2354      	movs	r3, #84	@ 0x54
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	0018      	movs	r0, r3
 80003d4:	230c      	movs	r3, #12
 80003d6:	001a      	movs	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	f003 f973 	bl	80036c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003de:	2338      	movs	r3, #56	@ 0x38
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	0018      	movs	r0, r3
 80003e4:	231c      	movs	r3, #28
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f003 f96b 	bl	80036c4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	0018      	movs	r0, r3
 80003f2:	2334      	movs	r3, #52	@ 0x34
 80003f4:	001a      	movs	r2, r3
 80003f6:	2100      	movs	r1, #0
 80003f8:	f003 f964 	bl	80036c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003fc:	4b4b      	ldr	r3, [pc, #300]	@ (800052c <MX_TIM1_Init+0x164>)
 80003fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000530 <MX_TIM1_Init+0x168>)
 8000400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000402:	4b4a      	ldr	r3, [pc, #296]	@ (800052c <MX_TIM1_Init+0x164>)
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000408:	4b48      	ldr	r3, [pc, #288]	@ (800052c <MX_TIM1_Init+0x164>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800040e:	4b47      	ldr	r3, [pc, #284]	@ (800052c <MX_TIM1_Init+0x164>)
 8000410:	4a48      	ldr	r2, [pc, #288]	@ (8000534 <MX_TIM1_Init+0x16c>)
 8000412:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000414:	4b45      	ldr	r3, [pc, #276]	@ (800052c <MX_TIM1_Init+0x164>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041a:	4b44      	ldr	r3, [pc, #272]	@ (800052c <MX_TIM1_Init+0x164>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000420:	4b42      	ldr	r3, [pc, #264]	@ (800052c <MX_TIM1_Init+0x164>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000426:	4b41      	ldr	r3, [pc, #260]	@ (800052c <MX_TIM1_Init+0x164>)
 8000428:	0018      	movs	r0, r3
 800042a:	f002 fbcf 	bl	8002bcc <HAL_TIM_PWM_Init>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f9df 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2154      	movs	r1, #84	@ 0x54
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044a:	187a      	adds	r2, r7, r1
 800044c:	4b37      	ldr	r3, [pc, #220]	@ (800052c <MX_TIM1_Init+0x164>)
 800044e:	0011      	movs	r1, r2
 8000450:	0018      	movs	r0, r3
 8000452:	f003 f833 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800045a:	f000 f9cb 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800045e:	2138      	movs	r1, #56	@ 0x38
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2260      	movs	r2, #96	@ 0x60
 8000464:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800048a:	1879      	adds	r1, r7, r1
 800048c:	4b27      	ldr	r3, [pc, #156]	@ (800052c <MX_TIM1_Init+0x164>)
 800048e:	2200      	movs	r2, #0
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fbf3 	bl	8002c7c <HAL_TIM_PWM_ConfigChannel>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800049a:	f000 f9ab 	bl	80007f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800049e:	2338      	movs	r3, #56	@ 0x38
 80004a0:	18f9      	adds	r1, r7, r3
 80004a2:	4b22      	ldr	r3, [pc, #136]	@ (800052c <MX_TIM1_Init+0x164>)
 80004a4:	2204      	movs	r2, #4
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 fbe8 	bl	8002c7c <HAL_TIM_PWM_ConfigChannel>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80004b0:	f000 f9a0 	bl	80007f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2280      	movs	r2, #128	@ 0x80
 80004d6:	0192      	lsls	r2, r2, #6
 80004d8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2280      	movs	r2, #128	@ 0x80
 80004f0:	0492      	lsls	r2, r2, #18
 80004f2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000506:	1d3a      	adds	r2, r7, #4
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <MX_TIM1_Init+0x164>)
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f003 f83d 	bl	800358c <HAL_TIMEx_ConfigBreakDeadTime>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000516:	f000 f96d 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800051a:	4b04      	ldr	r3, [pc, #16]	@ (800052c <MX_TIM1_Init+0x164>)
 800051c:	0018      	movs	r0, r3
 800051e:	f000 faf9 	bl	8000b14 <HAL_TIM_MspPostInit>

}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b018      	add	sp, #96	@ 0x60
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	20000124 	.word	0x20000124
 8000530:	40012c00 	.word	0x40012c00
 8000534:	0000ffff 	.word	0x0000ffff

08000538 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	@ 0x28
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053e:	231c      	movs	r3, #28
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	230c      	movs	r3, #12
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f003 f8bb 	bl	80036c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800054e:	003b      	movs	r3, r7
 8000550:	0018      	movs	r0, r3
 8000552:	231c      	movs	r3, #28
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f003 f8b4 	bl	80036c4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800055c:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <MX_TIM3_Init+0xcc>)
 800055e:	4a2a      	ldr	r2, [pc, #168]	@ (8000608 <MX_TIM3_Init+0xd0>)
 8000560:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <MX_TIM3_Init+0xcc>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000568:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <MX_TIM3_Init+0xcc>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800056e:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <MX_TIM3_Init+0xcc>)
 8000570:	4a26      	ldr	r2, [pc, #152]	@ (800060c <MX_TIM3_Init+0xd4>)
 8000572:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <MX_TIM3_Init+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <MX_TIM3_Init+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <MX_TIM3_Init+0xcc>)
 8000582:	0018      	movs	r0, r3
 8000584:	f002 fb22 	bl	8002bcc <HAL_TIM_PWM_Init>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800058c:	f000 f932 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000590:	211c      	movs	r1, #28
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800059e:	187a      	adds	r2, r7, r1
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <MX_TIM3_Init+0xcc>)
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 ff89 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80005ae:	f000 f921 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2260      	movs	r2, #96	@ 0x60
 80005b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ca:	0039      	movs	r1, r7
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <MX_TIM3_Init+0xcc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 fb53 	bl	8002c7c <HAL_TIM_PWM_ConfigChannel>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80005da:	f000 f90b 	bl	80007f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005de:	0039      	movs	r1, r7
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <MX_TIM3_Init+0xcc>)
 80005e2:	2204      	movs	r2, #4
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 fb49 	bl	8002c7c <HAL_TIM_PWM_ConfigChannel>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80005ee:	f000 f901 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <MX_TIM3_Init+0xcc>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fa8d 	bl	8000b14 <HAL_TIM_MspPostInit>

}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b00a      	add	sp, #40	@ 0x28
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000170 	.word	0x20000170
 8000608:	40000400 	.word	0x40000400
 800060c:	0000ffff 	.word	0x0000ffff

08000610 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_TIM14_Init+0x40>)
 8000616:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <MX_TIM14_Init+0x44>)
 8000618:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <MX_TIM14_Init+0x40>)
 800061c:	22f4      	movs	r2, #244	@ 0xf4
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_TIM14_Init+0x40>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_TIM14_Init+0x40>)
 800062a:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <MX_TIM14_Init+0x48>)
 800062c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_TIM14_Init+0x40>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_TIM14_Init+0x40>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <MX_TIM14_Init+0x40>)
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fa6d 	bl	8002b1c <HAL_TIM_Base_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000646:	f000 f8d5 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001bc 	.word	0x200001bc
 8000654:	40002000 	.word	0x40002000
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_DMA_Init+0x38>)
 8000664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_DMA_Init+0x38>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_DMA_Init+0x38>)
 8000670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2009      	movs	r0, #9
 8000680:	f000 fc3e 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000684:	2009      	movs	r0, #9
 8000686:	f000 fc50 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	40021000 	.word	0x40021000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b08b      	sub	sp, #44	@ 0x2c
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	2414      	movs	r4, #20
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2314      	movs	r3, #20
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f003 f80b 	bl	80036c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ae:	4b4d      	ldr	r3, [pc, #308]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b4c      	ldr	r3, [pc, #304]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006b4:	2120      	movs	r1, #32
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ba:	4b4a      	ldr	r3, [pc, #296]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006be:	2220      	movs	r2, #32
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b47      	ldr	r3, [pc, #284]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b46      	ldr	r3, [pc, #280]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b44      	ldr	r3, [pc, #272]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e2:	4b40      	ldr	r3, [pc, #256]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006e4:	2102      	movs	r1, #2
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ea:	4b3e      	ldr	r3, [pc, #248]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ee:	2202      	movs	r2, #2
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b3b      	ldr	r3, [pc, #236]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006fa:	4b3a      	ldr	r3, [pc, #232]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 80006fc:	2104      	movs	r1, #4
 80006fe:	430a      	orrs	r2, r1
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 8000704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000706:	2204      	movs	r2, #4
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000712:	4b34      	ldr	r3, [pc, #208]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 8000714:	2108      	movs	r1, #8
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
 800071a:	4b32      	ldr	r3, [pc, #200]	@ (80007e4 <MX_GPIO_Init+0x14c>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071e:	2208      	movs	r2, #8
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin, GPIO_PIN_SET);
 8000726:	23a0      	movs	r3, #160	@ 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	2201      	movs	r2, #1
 800072c:	21e0      	movs	r1, #224	@ 0xe0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 ff08 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED10_Pin
 8000734:	492c      	ldr	r1, [pc, #176]	@ (80007e8 <MX_GPIO_Init+0x150>)
 8000736:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <MX_GPIO_Init+0x154>)
 8000738:	2200      	movs	r2, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f000 ff02 	bl	8001544 <HAL_GPIO_WritePin>
                          |LED11_Pin|LED12_Pin|LED13_Pin|LED14_Pin
                          |LED15_Pin|LED3_Pin|LED4_Pin|LED5_Pin
                          |LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_ENABLE_GPIO_Port, AMP_ENABLE_Pin, GPIO_PIN_RESET);
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <MX_GPIO_Init+0x158>)
 8000742:	2200      	movs	r2, #0
 8000744:	2101      	movs	r1, #1
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fefc 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	22e0      	movs	r2, #224	@ 0xe0
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2201      	movs	r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	193a      	adds	r2, r7, r4
 8000766:	23a0      	movs	r3, #160	@ 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fd85 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED10_Pin
                           LED11_Pin LED12_Pin LED13_Pin LED14_Pin
                           LED15_Pin LED3_Pin LED4_Pin LED5_Pin
                           LED6_Pin LED7_Pin LED8_Pin LED9_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED10_Pin
 8000772:	193b      	adds	r3, r7, r4
 8000774:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_GPIO_Init+0x150>)
 8000776:	601a      	str	r2, [r3, #0]
                          |LED11_Pin|LED12_Pin|LED13_Pin|LED14_Pin
                          |LED15_Pin|LED3_Pin|LED4_Pin|LED5_Pin
                          |LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2201      	movs	r2, #1
 800077c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	193b      	adds	r3, r7, r4
 800078c:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <MX_GPIO_Init+0x154>)
 800078e:	0019      	movs	r1, r3
 8000790:	0010      	movs	r0, r2
 8000792:	f000 fd73 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_ENABLE_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2201      	movs	r2, #1
 80007a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AMP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	4a0f      	ldr	r2, [pc, #60]	@ (80007f0 <MX_GPIO_Init+0x158>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f000 fd61 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2202      	movs	r2, #2
 80007c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2288      	movs	r2, #136	@ 0x88
 80007c6:	0352      	lsls	r2, r2, #13
 80007c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <MX_GPIO_Init+0x158>)
 80007d4:	0019      	movs	r1, r3
 80007d6:	0010      	movs	r0, r2
 80007d8:	f000 fd50 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b00b      	add	sp, #44	@ 0x2c
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	0000ffff 	.word	0x0000ffff
 80007ec:	50000400 	.word	0x50000400
 80007f0:	50000c00 	.word	0x50000c00

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_MspInit+0x54>)
 8000808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_MspInit+0x54>)
 800080c:	2101      	movs	r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	641a      	str	r2, [r3, #64]	@ 0x40
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <HAL_MspInit+0x54>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_MspInit+0x54>)
 8000820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <HAL_MspInit+0x54>)
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	0549      	lsls	r1, r1, #21
 8000828:	430a      	orrs	r2, r1
 800082a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_MspInit+0x54>)
 800082e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	055b      	lsls	r3, r3, #21
 8000834:	4013      	ands	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2004      	movs	r0, #4
 8000840:	f000 fb5e 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000844:	2004      	movs	r0, #4
 8000846:	f000 fb70 	bl	8000f2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b095      	sub	sp, #84	@ 0x54
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	233c      	movs	r3, #60	@ 0x3c
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	0018      	movs	r0, r3
 8000866:	2314      	movs	r3, #20
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f002 ff2a 	bl	80036c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2328      	movs	r3, #40	@ 0x28
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 ff22 	bl	80036c4 <memset>
  if(hi2s->Instance==SPI1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a39      	ldr	r2, [pc, #228]	@ (800096c <HAL_I2S_MspInit+0x114>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d16b      	bne.n	8000962 <HAL_I2S_MspInit+0x10a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	193b      	adds	r3, r7, r4
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fc74 	bl	8002188 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008a4:	f7ff ffa6 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <HAL_I2S_MspInit+0x118>)
 80008aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ac:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <HAL_I2S_MspInit+0x118>)
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	0149      	lsls	r1, r1, #5
 80008b2:	430a      	orrs	r2, r1
 80008b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000970 <HAL_I2S_MspInit+0x118>)
 80008b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ba:	2380      	movs	r3, #128	@ 0x80
 80008bc:	015b      	lsls	r3, r3, #5
 80008be:	4013      	ands	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <HAL_I2S_MspInit+0x118>)
 80008c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008c8:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <HAL_I2S_MspInit+0x118>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	430a      	orrs	r2, r1
 80008ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d0:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <HAL_I2S_MspInit+0x118>)
 80008d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d4:	2201      	movs	r2, #1
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80008dc:	213c      	movs	r1, #60	@ 0x3c
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	4a24      	ldr	r2, [pc, #144]	@ (8000974 <HAL_I2S_MspInit+0x11c>)
 80008e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2202      	movs	r2, #2
 80008e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	187a      	adds	r2, r7, r1
 80008fe:	23a0      	movs	r3, #160	@ 0xa0
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fcb9 	bl	800127c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800090a:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	@ (800097c <HAL_I2S_MspInit+0x124>)
 800090e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 8000912:	2211      	movs	r2, #17
 8000914:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 8000918:	2210      	movs	r2, #16
 800091a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 8000924:	2280      	movs	r2, #128	@ 0x80
 8000926:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 800092a:	2280      	movs	r2, #128	@ 0x80
 800092c:	0052      	lsls	r2, r2, #1
 800092e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	00d2      	lsls	r2, r2, #3
 8000936:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 800093a:	2220      	movs	r2, #32
 800093c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 8000940:	22c0      	movs	r2, #192	@ 0xc0
 8000942:	0192      	lsls	r2, r2, #6
 8000944:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fb0b 	bl	8000f64 <HAL_DMA_Init>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <HAL_I2S_MspInit+0xfe>
    {
      Error_Handler();
 8000952:	f7ff ff4f 	bl	80007f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 800095a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_I2S_MspInit+0x120>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b015      	add	sp, #84	@ 0x54
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	40013000 	.word	0x40013000
 8000970:	40021000 	.word	0x40021000
 8000974:	00008006 	.word	0x00008006
 8000978:	20000064 	.word	0x20000064
 800097c:	40020008 	.word	0x40020008

08000980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08b      	sub	sp, #44	@ 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	2414      	movs	r4, #20
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	2314      	movs	r3, #20
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f002 fe96 	bl	80036c4 <memset>
  if(hspi->Instance==SPI2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a26      	ldr	r2, [pc, #152]	@ (8000a38 <HAL_SPI_MspInit+0xb8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d146      	bne.n	8000a30 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <HAL_SPI_MspInit+0xbc>)
 80009a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009a6:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <HAL_SPI_MspInit+0xbc>)
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	01c9      	lsls	r1, r1, #7
 80009ac:	430a      	orrs	r2, r1
 80009ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <HAL_SPI_MspInit+0xbc>)
 80009b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	01db      	lsls	r3, r3, #7
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <HAL_SPI_MspInit+0xbc>)
 80009c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <HAL_SPI_MspInit+0xbc>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ca:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <HAL_SPI_MspInit+0xbc>)
 80009cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2209      	movs	r2, #9
 80009da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2202      	movs	r2, #2
 80009e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	193a      	adds	r2, r7, r4
 80009f6:	23a0      	movs	r3, #160	@ 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fc3d 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2210      	movs	r2, #16
 8000a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2201      	movs	r2, #1
 8000a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	187a      	adds	r2, r7, r1
 8000a24:	23a0      	movs	r3, #160	@ 0xa0
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fc26 	bl	800127c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b00b      	add	sp, #44	@ 0x2c
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	40003800 	.word	0x40003800
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08f      	sub	sp, #60	@ 0x3c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	2410      	movs	r4, #16
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2328      	movs	r3, #40	@ 0x28
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f002 fe36 	bl	80036c4 <memset>
  if(htim_pwm->Instance==TIM1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <HAL_TIM_PWM_MspInit+0x88>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d11d      	bne.n	8000a9e <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2280      	movs	r2, #128	@ 0x80
 8000a66:	0392      	lsls	r2, r2, #14
 8000a68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 fb88 	bl	8002188 <HAL_RCCEx_PeriphCLKConfig>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000a7c:	f7ff feba 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_TIM_PWM_MspInit+0x8c>)
 8000a82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <HAL_TIM_PWM_MspInit+0x8c>)
 8000a86:	2180      	movs	r1, #128	@ 0x80
 8000a88:	0109      	lsls	r1, r1, #4
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_TIM_PWM_MspInit+0x8c>)
 8000a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a92:	2380      	movs	r3, #128	@ 0x80
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	4013      	ands	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a9c:	e010      	b.n	8000ac0 <HAL_TIM_PWM_MspInit+0x80>
  else if(htim_pwm->Instance==TIM3)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad0 <HAL_TIM_PWM_MspInit+0x90>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d10b      	bne.n	8000ac0 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <HAL_TIM_PWM_MspInit+0x8c>)
 8000aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <HAL_TIM_PWM_MspInit+0x8c>)
 8000aae:	2102      	movs	r1, #2
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <HAL_TIM_PWM_MspInit+0x8c>)
 8000ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ab8:	2202      	movs	r2, #2
 8000aba:	4013      	ands	r3, r2
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b00f      	add	sp, #60	@ 0x3c
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40000400 	.word	0x40000400

08000ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <HAL_TIM_Base_MspInit+0x38>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10d      	bne.n	8000b02 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	0209      	lsls	r1, r1, #8
 8000af0:	430a      	orrs	r2, r1
 8000af2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	40002000 	.word	0x40002000
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b08b      	sub	sp, #44	@ 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	2414      	movs	r4, #20
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	2314      	movs	r3, #20
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f002 fdcc 	bl	80036c4 <memset>
  if(htim->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <HAL_TIM_MspPostInit+0xc4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d124      	bne.n	8000b80 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b29      	ldr	r3, [pc, #164]	@ (8000bdc <HAL_TIM_MspPostInit+0xc8>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3a:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <HAL_TIM_MspPostInit+0xc8>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b42:	4b26      	ldr	r3, [pc, #152]	@ (8000bdc <HAL_TIM_MspPostInit+0xc8>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	22c0      	movs	r2, #192	@ 0xc0
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	0021      	movs	r1, r4
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	23a0      	movs	r3, #160	@ 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fb7f 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b7e:	e026      	b.n	8000bce <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a16      	ldr	r2, [pc, #88]	@ (8000be0 <HAL_TIM_MspPostInit+0xcc>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d121      	bne.n	8000bce <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_TIM_MspPostInit+0xc8>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <HAL_TIM_MspPostInit+0xc8>)
 8000b90:	2104      	movs	r1, #4
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_TIM_MspPostInit+0xc8>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_3_Pin;
 8000ba2:	2114      	movs	r1, #20
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	22c0      	movs	r2, #192	@ 0xc0
 8000ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_TIM_MspPostInit+0xd0>)
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	0010      	movs	r0, r2
 8000bca:	f000 fb57 	bl	800127c <HAL_GPIO_Init>
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b00b      	add	sp, #44	@ 0x2c
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	40012c00 	.word	0x40012c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40000400 	.word	0x40000400
 8000be4:	50000800 	.word	0x50000800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f8ae 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <DMA1_Channel1_IRQHandler+0x14>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fa24 	bl	8001078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000064 	.word	0x20000064

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f7ff fff6 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	@ (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	@ (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c76:	f002 fd2d 	bl	80036d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c7a:	f7ff facf 	bl	800021c <main>

08000c7e <LoopForever>:

LoopForever:
  b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c8c:	080037f0 	.word	0x080037f0
  ldr r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c94:	2000020c 	.word	0x2000020c

08000c98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x3c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_Init+0x3c>)
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	0049      	lsls	r1, r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f810 	bl	8000cdc <HAL_InitTick>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fd9a 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_InitTick+0x88>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d02b      	beq.n	8000d4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <HAL_InitTick+0x8c>)
 8000cf6:	681c      	ldr	r4, [r3, #0]
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_InitTick+0x88>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	23fa      	movs	r3, #250	@ 0xfa
 8000d00:	0098      	lsls	r0, r3, #2
 8000d02:	f7ff f9ff 	bl	8000104 <__udivsi3>
 8000d06:	0003      	movs	r3, r0
 8000d08:	0019      	movs	r1, r3
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f7ff f9fa 	bl	8000104 <__udivsi3>
 8000d10:	0003      	movs	r3, r0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 f919 	bl	8000f4a <HAL_SYSTICK_Config>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d112      	bne.n	8000d42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d80a      	bhi.n	8000d38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2301      	movs	r3, #1
 8000d26:	425b      	negs	r3, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f8e8 	bl	8000f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_InitTick+0x90>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e00d      	b.n	8000d54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e008      	b.n	8000d54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	230f      	movs	r3, #15
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e003      	b.n	8000d54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d54:	230f      	movs	r3, #15
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	781b      	ldrb	r3, [r3, #0]
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b005      	add	sp, #20
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000208 	.word	0x20000208

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	@ (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	20000208 	.word	0x20000208

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dba:	d809      	bhi.n	8000dd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_EnableIRQ+0x30>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df0:	d828      	bhi.n	8000e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df2:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	33c0      	adds	r3, #192	@ 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	@ 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	@ 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	481f      	ldr	r0, [pc, #124]	@ (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	33c0      	adds	r3, #192	@ 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e42:	e031      	b.n	8000ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	400b      	ands	r3, r1
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3306      	adds	r3, #6
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	@ 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	@ 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001c      	movs	r4, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	4023      	ands	r3, r4
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	18c3      	adds	r3, r0, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	045b      	lsls	r3, r3, #17
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d301      	bcc.n	8000ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e010      	b.n	8000ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <SysTick_Config+0x44>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	3a01      	subs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2103      	movs	r1, #3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ff7c 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <SysTick_Config+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <SysTick_Config+0x44>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	0002      	movs	r2, r0
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffaf 	bl	8000eb8 <SysTick_Config>
 8000f5a:	0003      	movs	r3, r0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e077      	b.n	8001066 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a3d      	ldr	r2, [pc, #244]	@ (8001070 <HAL_DMA_Init+0x10c>)
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	4463      	add	r3, ip
 8000f80:	2114      	movs	r1, #20
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff f8be 	bl	8000104 <__udivsi3>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	009a      	lsls	r2, r3, #2
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2225      	movs	r2, #37	@ 0x25
 8000f94:	2102      	movs	r1, #2
 8000f96:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4934      	ldr	r1, [pc, #208]	@ (8001074 <HAL_DMA_Init+0x110>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 f8fb 	bl	80011dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d102      	bne.n	8000ff8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001000:	213f      	movs	r1, #63	@ 0x3f
 8001002:	400a      	ands	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800100e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d011      	beq.n	800103c <HAL_DMA_Init+0xd8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d80d      	bhi.n	800103c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0018      	movs	r0, r3
 8001024:	f000 f906 	bl	8001234 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	e008      	b.n	800104e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2225      	movs	r2, #37	@ 0x25
 8001058:	2101      	movs	r1, #1
 800105a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2224      	movs	r2, #36	@ 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	bffdfff8 	.word	0xbffdfff8
 8001074:	ffff800f 	.word	0xffff800f

08001078 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001080:	4b55      	ldr	r3, [pc, #340]	@ (80011d8 <HAL_DMA_IRQHandler+0x160>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	221c      	movs	r2, #28
 8001094:	4013      	ands	r3, r2
 8001096:	2204      	movs	r2, #4
 8001098:	409a      	lsls	r2, r3
 800109a:	0013      	movs	r3, r2
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	d027      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x7a>
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2204      	movs	r2, #4
 80010a6:	4013      	ands	r3, r2
 80010a8:	d023      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2220      	movs	r2, #32
 80010b2:	4013      	ands	r3, r2
 80010b4:	d107      	bne.n	80010c6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2104      	movs	r1, #4
 80010c2:	438a      	bics	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80010c6:	4b44      	ldr	r3, [pc, #272]	@ (80011d8 <HAL_DMA_IRQHandler+0x160>)
 80010c8:	6859      	ldr	r1, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	221c      	movs	r2, #28
 80010d0:	4013      	ands	r3, r2
 80010d2:	2204      	movs	r2, #4
 80010d4:	409a      	lsls	r2, r3
 80010d6:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <HAL_DMA_IRQHandler+0x160>)
 80010d8:	430a      	orrs	r2, r1
 80010da:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d100      	bne.n	80010e6 <HAL_DMA_IRQHandler+0x6e>
 80010e4:	e073      	b.n	80011ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	0010      	movs	r0, r2
 80010ee:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80010f0:	e06d      	b.n	80011ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	221c      	movs	r2, #28
 80010f8:	4013      	ands	r3, r2
 80010fa:	2202      	movs	r2, #2
 80010fc:	409a      	lsls	r2, r3
 80010fe:	0013      	movs	r3, r2
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4013      	ands	r3, r2
 8001104:	d02e      	beq.n	8001164 <HAL_DMA_IRQHandler+0xec>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2202      	movs	r2, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d02a      	beq.n	8001164 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2220      	movs	r2, #32
 8001116:	4013      	ands	r3, r2
 8001118:	d10b      	bne.n	8001132 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	210a      	movs	r1, #10
 8001126:	438a      	bics	r2, r1
 8001128:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2225      	movs	r2, #37	@ 0x25
 800112e:	2101      	movs	r1, #1
 8001130:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001132:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <HAL_DMA_IRQHandler+0x160>)
 8001134:	6859      	ldr	r1, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	221c      	movs	r2, #28
 800113c:	4013      	ands	r3, r2
 800113e:	2202      	movs	r2, #2
 8001140:	409a      	lsls	r2, r3
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <HAL_DMA_IRQHandler+0x160>)
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2224      	movs	r2, #36	@ 0x24
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03a      	beq.n	80011ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	0010      	movs	r0, r2
 8001160:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001162:	e034      	b.n	80011ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	221c      	movs	r2, #28
 800116a:	4013      	ands	r3, r2
 800116c:	2208      	movs	r2, #8
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4013      	ands	r3, r2
 8001176:	d02b      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x158>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2208      	movs	r2, #8
 800117c:	4013      	ands	r3, r2
 800117e:	d027      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	210e      	movs	r1, #14
 800118c:	438a      	bics	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_DMA_IRQHandler+0x160>)
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	221c      	movs	r2, #28
 800119a:	4013      	ands	r3, r2
 800119c:	2201      	movs	r2, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_DMA_IRQHandler+0x160>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2225      	movs	r2, #37	@ 0x25
 80011b0:	2101      	movs	r1, #1
 80011b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2224      	movs	r2, #36	@ 0x24
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	0010      	movs	r0, r2
 80011cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46c0      	nop			@ (mov r8, r8)
}
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b004      	add	sp, #16
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020000 	.word	0x40020000

080011dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	4a10      	ldr	r2, [pc, #64]	@ (800122c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80011ec:	4694      	mov	ip, r2
 80011ee:	4463      	add	r3, ip
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	001a      	movs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	001a      	movs	r2, r3
 80011fe:	23ff      	movs	r3, #255	@ 0xff
 8001200:	4013      	ands	r3, r2
 8001202:	3b08      	subs	r3, #8
 8001204:	2114      	movs	r1, #20
 8001206:	0018      	movs	r0, r3
 8001208:	f7fe ff7c 	bl	8000104 <__udivsi3>
 800120c:	0003      	movs	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001214:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	221f      	movs	r2, #31
 800121a:	4013      	ands	r3, r2
 800121c:	2201      	movs	r2, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}
 800122c:	10008200 	.word	0x10008200
 8001230:	40020880 	.word	0x40020880

08001234 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	223f      	movs	r2, #63	@ 0x3f
 8001242:	4013      	ands	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800124a:	4694      	mov	ip, r2
 800124c:	4463      	add	r3, ip
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	001a      	movs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800125a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3b01      	subs	r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
 8001264:	2201      	movs	r2, #1
 8001266:	409a      	lsls	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b004      	add	sp, #16
 8001272:	bd80      	pop	{r7, pc}
 8001274:	1000823f 	.word	0x1000823f
 8001278:	40020940 	.word	0x40020940

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e147      	b.n	800151c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4091      	lsls	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_Init+0x28>
 80012a2:	e138      	b.n	8001516 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x40>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	2201      	movs	r2, #1
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	4013      	ands	r3, r2
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	4013      	ands	r3, r2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	58d3      	ldr	r3, [r2, r3]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2207      	movs	r2, #7
 8001378:	4013      	ands	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2107      	movs	r1, #7
 8001392:	400b      	ands	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	6939      	ldr	r1, [r7, #16]
 80013ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	43da      	mvns	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	23c0      	movs	r3, #192	@ 0xc0
 80013e8:	029b      	lsls	r3, r3, #10
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_GPIO_Init+0x174>
 80013ee:	e092      	b.n	8001516 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013f0:	4a50      	ldr	r2, [pc, #320]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3318      	adds	r3, #24
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	589b      	ldr	r3, [r3, r2]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2203      	movs	r2, #3
 8001402:	4013      	ands	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	220f      	movs	r2, #15
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	43da      	mvns	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	23a0      	movs	r3, #160	@ 0xa0
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	429a      	cmp	r2, r3
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x1ca>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a45      	ldr	r2, [pc, #276]	@ (8001538 <HAL_GPIO_Init+0x2bc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x1c6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a44      	ldr	r2, [pc, #272]	@ (800153c <HAL_GPIO_Init+0x2c0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x1c2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a43      	ldr	r2, [pc, #268]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x1be>
 8001436:	2303      	movs	r3, #3
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x1cc>
 800143a:	2305      	movs	r3, #5
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x1cc>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x1cc>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x1cc>
 8001446:	2300      	movs	r3, #0
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	2103      	movs	r1, #3
 800144c:	400a      	ands	r2, r1
 800144e:	00d2      	lsls	r2, r2, #3
 8001450:	4093      	lsls	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001458:	4936      	ldr	r1, [pc, #216]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3318      	adds	r3, #24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	035b      	lsls	r3, r3, #13
 800147e:	4013      	ands	r3, r2
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001490:	4b28      	ldr	r3, [pc, #160]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	039b      	lsls	r3, r3, #14
 80014a8:	4013      	ands	r3, r2
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 80014bc:	2384      	movs	r3, #132	@ 0x84
 80014be:	58d3      	ldr	r3, [r2, r3]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	4013      	ands	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e0:	4914      	ldr	r1, [pc, #80]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 80014e2:	2284      	movs	r2, #132	@ 0x84
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014e8:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	58d3      	ldr	r3, [r2, r3]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43da      	mvns	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	4013      	ands	r3, r2
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800150e:	4909      	ldr	r1, [pc, #36]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 8001510:	2280      	movs	r2, #128	@ 0x80
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	40da      	lsrs	r2, r3
 8001524:	1e13      	subs	r3, r2, #0
 8001526:	d000      	beq.n	800152a <HAL_GPIO_Init+0x2ae>
 8001528:	e6b0      	b.n	800128c <HAL_GPIO_Init+0x10>
  }
}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b006      	add	sp, #24
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021800 	.word	0x40021800
 8001538:	50000400 	.word	0x50000400
 800153c:	50000800 	.word	0x50000800
 8001540:	50000c00 	.word	0x50000c00

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	0008      	movs	r0, r1
 800154e:	0011      	movs	r1, r2
 8001550:	1cbb      	adds	r3, r7, #2
 8001552:	1c02      	adds	r2, r0, #0
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	1c7b      	adds	r3, r7, #1
 8001558:	1c0a      	adds	r2, r1, #0
 800155a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155c:	1c7b      	adds	r3, r7, #1
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001564:	1cbb      	adds	r3, r7, #2
 8001566:	881a      	ldrh	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0e5      	b.n	800175e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2235      	movs	r2, #53	@ 0x35
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d107      	bne.n	80015ae <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2234      	movs	r2, #52	@ 0x34
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff f955 	bl	8000858 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2235      	movs	r2, #53	@ 0x35
 80015b2:	2102      	movs	r1, #2
 80015b4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69da      	ldr	r2, [r3, #28]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4969      	ldr	r1, [pc, #420]	@ (8001768 <HAL_I2S_Init+0x1e8>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2202      	movs	r2, #2
 80015cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d100      	bne.n	80015d8 <HAL_I2S_Init+0x58>
 80015d6:	e076      	b.n	80016c6 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80015e0:	2310      	movs	r3, #16
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e001      	b.n	80015ea <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80015e6:	2320      	movs	r3, #32
 80015e8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d802      	bhi.n	80015f8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 ff3d 	bl	800247c <HAL_RCCEx_GetPeriphCLKFreq>
 8001602:	0003      	movs	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	429a      	cmp	r2, r3
 8001610:	d131      	bne.n	8001676 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	0019      	movs	r1, r3
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7fe fd6f 	bl	8000104 <__udivsi3>
 8001626:	0003      	movs	r3, r0
 8001628:	001a      	movs	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	189b      	adds	r3, r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	001a      	movs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	0019      	movs	r1, r3
 800163a:	0010      	movs	r0, r2
 800163c:	f7fe fd62 	bl	8000104 <__udivsi3>
 8001640:	0003      	movs	r3, r0
 8001642:	3305      	adds	r3, #5
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	e02a      	b.n	800169e <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	0019      	movs	r1, r3
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7fe fd58 	bl	8000104 <__udivsi3>
 8001654:	0003      	movs	r3, r0
 8001656:	001a      	movs	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	189b      	adds	r3, r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	001a      	movs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	0019      	movs	r1, r3
 8001668:	0010      	movs	r0, r2
 800166a:	f7fe fd4b 	bl	8000104 <__udivsi3>
 800166e:	0003      	movs	r3, r0
 8001670:	3305      	adds	r3, #5
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e013      	b.n	800169e <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001676:	6979      	ldr	r1, [r7, #20]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7fe fd43 	bl	8000104 <__udivsi3>
 800167e:	0003      	movs	r3, r0
 8001680:	001a      	movs	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	189b      	adds	r3, r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	001a      	movs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	0019      	movs	r1, r3
 8001692:	0010      	movs	r0, r2
 8001694:	f7fe fd36 	bl	8000104 <__udivsi3>
 8001698:	0003      	movs	r3, r0
 800169a:	3305      	adds	r3, #5
 800169c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	210a      	movs	r1, #10
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fd2e 	bl	8000104 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	e003      	b.n	80016ce <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d902      	bls.n	80016da <HAL_I2S_Init+0x15a>
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2bff      	cmp	r3, #255	@ 0xff
 80016d8:	d907      	bls.n	80016ea <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	2210      	movs	r2, #16
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e039      	b.n	800175e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	0011      	movs	r1, r2
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	4a18      	ldr	r2, [pc, #96]	@ (8001768 <HAL_I2S_Init+0x1e8>)
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4319      	orrs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4319      	orrs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	430b      	orrs	r3, r1
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2180      	movs	r1, #128	@ 0x80
 8001726:	0109      	lsls	r1, r1, #4
 8001728:	430a      	orrs	r2, r1
 800172a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b30      	cmp	r3, #48	@ 0x30
 8001732:	d003      	beq.n	800173c <HAL_I2S_Init+0x1bc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2bb0      	cmp	r3, #176	@ 0xb0
 800173a:	d108      	bne.n	800174e <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	0149      	lsls	r1, r1, #5
 800174a:	430a      	orrs	r2, r1
 800174c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2235      	movs	r2, #53	@ 0x35
 8001758:	2101      	movs	r1, #1
 800175a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b008      	add	sp, #32
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	fffff040 	.word	0xfffff040

0800176c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	@ (80017e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800177a:	4013      	ands	r3, r2
 800177c:	0019      	movs	r1, r3
 800177e:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	429a      	cmp	r2, r3
 800178e:	d11f      	bne.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	0013      	movs	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	189b      	adds	r3, r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4912      	ldr	r1, [pc, #72]	@ (80017e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f7fe fcb0 	bl	8000104 <__udivsi3>
 80017a4:	0003      	movs	r3, r0
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017aa:	e008      	b.n	80017be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e001      	b.n	80017be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e009      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	401a      	ands	r2, r3
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d0ed      	beq.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	40007000 	.word	0x40007000
 80017e0:	fffff9ff 	.word	0xfffff9ff
 80017e4:	20000000 	.word	0x20000000
 80017e8:	000f4240 	.word	0x000f4240

080017ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	23e0      	movs	r3, #224	@ 0xe0
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	4013      	ands	r3, r2
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e2fe      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x1e>
 8001820:	e07c      	b.n	800191c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001822:	4bc3      	ldr	r3, [pc, #780]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2238      	movs	r2, #56	@ 0x38
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182c:	4bc0      	ldr	r3, [pc, #768]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
 8001834:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0x3e>
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d002      	beq.n	8001848 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d10b      	bne.n	8001860 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	4bb9      	ldr	r3, [pc, #740]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	029b      	lsls	r3, r3, #10
 8001850:	4013      	ands	r3, r2
 8001852:	d062      	beq.n	800191a <HAL_RCC_OscConfig+0x116>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d15e      	bne.n	800191a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e2d9      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	025b      	lsls	r3, r3, #9
 8001868:	429a      	cmp	r2, r3
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x78>
 800186c:	4bb0      	ldr	r3, [pc, #704]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4baf      	ldr	r3, [pc, #700]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	0249      	lsls	r1, r1, #9
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e020      	b.n	80018be <HAL_RCC_OscConfig+0xba>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	23a0      	movs	r3, #160	@ 0xa0
 8001882:	02db      	lsls	r3, r3, #11
 8001884:	429a      	cmp	r2, r3
 8001886:	d10e      	bne.n	80018a6 <HAL_RCC_OscConfig+0xa2>
 8001888:	4ba9      	ldr	r3, [pc, #676]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4ba8      	ldr	r3, [pc, #672]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800188e:	2180      	movs	r1, #128	@ 0x80
 8001890:	02c9      	lsls	r1, r1, #11
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	4ba6      	ldr	r3, [pc, #664]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4ba5      	ldr	r3, [pc, #660]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	0249      	lsls	r1, r1, #9
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0xba>
 80018a6:	4ba2      	ldr	r3, [pc, #648]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4ba1      	ldr	r3, [pc, #644]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	49a1      	ldr	r1, [pc, #644]	@ (8001b34 <HAL_RCC_OscConfig+0x330>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	4b9f      	ldr	r3, [pc, #636]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b9e      	ldr	r3, [pc, #632]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	499f      	ldr	r1, [pc, #636]	@ (8001b38 <HAL_RCC_OscConfig+0x334>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d014      	beq.n	80018f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fa65 	bl	8000d94 <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fa60 	bl	8000d94 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	@ 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e298      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e2:	4b93      	ldr	r3, [pc, #588]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	2380      	movs	r3, #128	@ 0x80
 80018e8:	029b      	lsls	r3, r3, #10
 80018ea:	4013      	ands	r3, r2
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xcc>
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa50 	bl	8000d94 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fa:	f7ff fa4b 	bl	8000d94 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	@ 0x64
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e283      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190c:	4b88      	ldr	r3, [pc, #544]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0xf6>
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d100      	bne.n	8001928 <HAL_RCC_OscConfig+0x124>
 8001926:	e099      	b.n	8001a5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001928:	4b81      	ldr	r3, [pc, #516]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2238      	movs	r2, #56	@ 0x38
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001932:	4b7f      	ldr	r3, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2203      	movs	r2, #3
 8001938:	4013      	ands	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b10      	cmp	r3, #16
 8001940:	d102      	bne.n	8001948 <HAL_RCC_OscConfig+0x144>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d002      	beq.n	800194e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d135      	bne.n	80019ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194e:	4b78      	ldr	r3, [pc, #480]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4013      	ands	r3, r2
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x162>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e256      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b72      	ldr	r3, [pc, #456]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a74      	ldr	r2, [pc, #464]	@ (8001b3c <HAL_RCC_OscConfig+0x338>)
 800196c:	4013      	ands	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	4b6e      	ldr	r3, [pc, #440]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001982:	4b6b      	ldr	r3, [pc, #428]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6e      	ldr	r2, [pc, #440]	@ (8001b40 <HAL_RCC_OscConfig+0x33c>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	4b67      	ldr	r3, [pc, #412]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001996:	4b66      	ldr	r3, [pc, #408]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0adb      	lsrs	r3, r3, #11
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	4a68      	ldr	r2, [pc, #416]	@ (8001b44 <HAL_RCC_OscConfig+0x340>)
 80019a2:	40da      	lsrs	r2, r3
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <HAL_RCC_OscConfig+0x344>)
 80019a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019a8:	4b68      	ldr	r3, [pc, #416]	@ (8001b4c <HAL_RCC_OscConfig+0x348>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff f995 	bl	8000cdc <HAL_InitTick>
 80019b2:	1e03      	subs	r3, r0, #0
 80019b4:	d051      	beq.n	8001a5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e22c      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d030      	beq.n	8001a24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b40 <HAL_RCC_OscConfig+0x33c>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019d6:	4b56      	ldr	r3, [pc, #344]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b55      	ldr	r3, [pc, #340]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	0049      	lsls	r1, r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f9d6 	bl	8000d94 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff f9d1 	bl	8000d94 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e209      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b4b      	ldr	r3, [pc, #300]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b48      	ldr	r3, [pc, #288]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a4a      	ldr	r2, [pc, #296]	@ (8001b3c <HAL_RCC_OscConfig+0x338>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	021a      	lsls	r2, r3, #8
 8001a1c:	4b44      	ldr	r3, [pc, #272]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	e01b      	b.n	8001a5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a24:	4b42      	ldr	r3, [pc, #264]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	4949      	ldr	r1, [pc, #292]	@ (8001b50 <HAL_RCC_OscConfig+0x34c>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f9b0 	bl	8000d94 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f9ab 	bl	8000d94 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1e3      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a4c:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4013      	ands	r3, r2
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x236>
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2208      	movs	r2, #8
 8001a62:	4013      	ands	r3, r2
 8001a64:	d047      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a66:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2238      	movs	r2, #56	@ 0x38
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	d10a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a72:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d03c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2f2>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d138      	bne.n	8001af6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e1c5      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d019      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a90:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a94:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f97a 	bl	8000d94 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f975 	bl	8000d94 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1ad      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abc:	2202      	movs	r2, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f1      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x2a2>
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	438a      	bics	r2, r1
 8001ace:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f960 	bl	8000d94 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ada:	f7ff f95b 	bl	8000d94 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e193      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d1f1      	bne.n	8001ada <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2fe>
 8001b00:	e0c6      	b.n	8001c90 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	231f      	movs	r3, #31
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2238      	movs	r2, #56	@ 0x38
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d11e      	bne.n	8001b54 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_RCC_OscConfig+0x32c>)
 8001b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x31e>
 8001b20:	e0b6      	b.n	8001c90 <HAL_RCC_OscConfig+0x48c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d000      	beq.n	8001b2c <HAL_RCC_OscConfig+0x328>
 8001b2a:	e0b1      	b.n	8001c90 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e171      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	fffeffff 	.word	0xfffeffff
 8001b38:	fffbffff 	.word	0xfffbffff
 8001b3c:	ffff80ff 	.word	0xffff80ff
 8001b40:	ffffc7ff 	.word	0xffffc7ff
 8001b44:	00f42400 	.word	0x00f42400
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b54:	4bb1      	ldr	r3, [pc, #708]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x360>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x362>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d011      	beq.n	8001b8e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4bac      	ldr	r3, [pc, #688]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b6e:	4bab      	ldr	r3, [pc, #684]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	0549      	lsls	r1, r1, #21
 8001b74:	430a      	orrs	r2, r1
 8001b76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b78:	4ba8      	ldr	r3, [pc, #672]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	055b      	lsls	r3, r3, #21
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b86:	231f      	movs	r3, #31
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	4ba4      	ldr	r3, [pc, #656]	@ (8001e20 <HAL_RCC_OscConfig+0x61c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d11a      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b9a:	4ba1      	ldr	r3, [pc, #644]	@ (8001e20 <HAL_RCC_OscConfig+0x61c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4ba0      	ldr	r3, [pc, #640]	@ (8001e20 <HAL_RCC_OscConfig+0x61c>)
 8001ba0:	2180      	movs	r1, #128	@ 0x80
 8001ba2:	0049      	lsls	r1, r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f8f4 	bl	8000d94 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f8ef 	bl	8000d94 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e127      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc4:	4b96      	ldr	r3, [pc, #600]	@ (8001e20 <HAL_RCC_OscConfig+0x61c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x3e2>
 8001bd8:	4b90      	ldr	r3, [pc, #576]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001bda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x404>
 8001bee:	4b8b      	ldr	r3, [pc, #556]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001bf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bf2:	4b8a      	ldr	r3, [pc, #552]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bfa:	4b88      	ldr	r3, [pc, #544]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001bfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bfe:	4b87      	ldr	r3, [pc, #540]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
 8001c08:	4b84      	ldr	r3, [pc, #528]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c0c:	4b83      	ldr	r3, [pc, #524]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c0e:	2101      	movs	r1, #1
 8001c10:	438a      	bics	r2, r1
 8001c12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c14:	4b81      	ldr	r3, [pc, #516]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c18:	4b80      	ldr	r3, [pc, #512]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d014      	beq.n	8001c52 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f8b4 	bl	8000d94 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff f8af 	bl	8000d94 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	4a79      	ldr	r2, [pc, #484]	@ (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0e6      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c46:	4b75      	ldr	r3, [pc, #468]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x42e>
 8001c50:	e013      	b.n	8001c7a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff f89f 	bl	8000d94 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5a:	e009      	b.n	8001c70 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f89a 	bl	8000d94 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a6f      	ldr	r2, [pc, #444]	@ (8001e24 <HAL_RCC_OscConfig+0x620>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0d1      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c70:	4b6a      	ldr	r3, [pc, #424]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c7a:	231f      	movs	r3, #31
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b65      	ldr	r3, [pc, #404]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c88:	4b64      	ldr	r3, [pc, #400]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c8a:	4967      	ldr	r1, [pc, #412]	@ (8001e28 <HAL_RCC_OscConfig+0x624>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x496>
 8001c98:	e0bb      	b.n	8001e12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9a:	4b60      	ldr	r3, [pc, #384]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2238      	movs	r2, #56	@ 0x38
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d100      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4a4>
 8001ca6:	e07b      	b.n	8001da0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d156      	bne.n	8001d5e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b59      	ldr	r3, [pc, #356]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001cb6:	495d      	ldr	r1, [pc, #372]	@ (8001e2c <HAL_RCC_OscConfig+0x628>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f86a 	bl	8000d94 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7ff f865 	bl	8000d94 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e09d      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	049b      	lsls	r3, r3, #18
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a51      	ldr	r2, [pc, #324]	@ (8001e30 <HAL_RCC_OscConfig+0x62c>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d10:	431a      	orrs	r2, r3
 8001d12:	4b42      	ldr	r3, [pc, #264]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d18:	4b40      	ldr	r3, [pc, #256]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d1e:	2180      	movs	r1, #128	@ 0x80
 8001d20:	0449      	lsls	r1, r1, #17
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d26:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0549      	lsls	r1, r1, #21
 8001d30:	430a      	orrs	r2, r1
 8001d32:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f82e 	bl	8000d94 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f829 	bl	8000d94 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e061      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d50:	4b32      	ldr	r3, [pc, #200]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	049b      	lsls	r3, r3, #18
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x53a>
 8001d5c:	e059      	b.n	8001e12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d64:	4931      	ldr	r1, [pc, #196]	@ (8001e2c <HAL_RCC_OscConfig+0x628>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f813 	bl	8000d94 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f80e 	bl	8000d94 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e046      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d86:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	049b      	lsls	r3, r3, #18
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d92:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001d98:	4926      	ldr	r1, [pc, #152]	@ (8001e34 <HAL_RCC_OscConfig+0x630>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	e038      	b.n	8001e12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e033      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_RCC_OscConfig+0x618>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2203      	movs	r2, #3
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d126      	bne.n	8001e0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2270      	movs	r2, #112	@ 0x70
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d11f      	bne.n	8001e0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	23fe      	movs	r3, #254	@ 0xfe
 8001dd2:	01db      	lsls	r3, r3, #7
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d116      	bne.n	8001e0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	23f8      	movs	r3, #248	@ 0xf8
 8001de4:	039b      	lsls	r3, r3, #14
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d10e      	bne.n	8001e0e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	23e0      	movs	r3, #224	@ 0xe0
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	401a      	ands	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	0f5b      	lsrs	r3, r3, #29
 8001e04:	075a      	lsls	r2, r3, #29
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b008      	add	sp, #32
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	00001388 	.word	0x00001388
 8001e28:	efffffff 	.word	0xefffffff
 8001e2c:	feffffff 	.word	0xfeffffff
 8001e30:	11c1808c 	.word	0x11c1808c
 8001e34:	eefefffc 	.word	0xeefefffc

08001e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0e9      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b76      	ldr	r3, [pc, #472]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2207      	movs	r2, #7
 8001e52:	4013      	ands	r3, r2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d91e      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b73      	ldr	r3, [pc, #460]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	4b70      	ldr	r3, [pc, #448]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e6c:	f7fe ff92 	bl	8000d94 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e74:	e009      	b.n	8001e8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e76:	f7fe ff8d 	bl	8000d94 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4a6a      	ldr	r2, [pc, #424]	@ (800202c <HAL_RCC_ClockConfig+0x1f4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0ca      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e8a:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2207      	movs	r2, #7
 8001e90:	4013      	ands	r3, r2
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1ee      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d006      	beq.n	8001eba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001eac:	4b60      	ldr	r3, [pc, #384]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b5f      	ldr	r3, [pc, #380]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	21e0      	movs	r1, #224	@ 0xe0
 8001eb4:	01c9      	lsls	r1, r1, #7
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eba:	4b5d      	ldr	r3, [pc, #372]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4a5d      	ldr	r2, [pc, #372]	@ (8002034 <HAL_RCC_ClockConfig+0x1fc>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b59      	ldr	r3, [pc, #356]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d057      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee0:	4b53      	ldr	r3, [pc, #332]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d12b      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e097      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	049b      	lsls	r3, r3, #18
 8001f00:	4013      	ands	r3, r2
 8001f02:	d11f      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e08b      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f10:	4b47      	ldr	r3, [pc, #284]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d113      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e07f      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f28:	4b41      	ldr	r3, [pc, #260]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e074      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f36:	4b3e      	ldr	r3, [pc, #248]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e06d      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f44:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2207      	movs	r2, #7
 8001f4a:	4393      	bics	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4b37      	ldr	r3, [pc, #220]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f58:	f7fe ff1c 	bl	8000d94 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	e009      	b.n	8001f76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f62:	f7fe ff17 	bl	8000d94 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800202c <HAL_RCC_ClockConfig+0x1f4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e054      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b2e      	ldr	r3, [pc, #184]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2238      	movs	r2, #56	@ 0x38
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1ec      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	4013      	ands	r3, r2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d21e      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fef4 	bl	8000d94 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb2:	f7fe feef 	bl	8000d94 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800202c <HAL_RCC_ClockConfig+0x1f4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e02c      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fc6:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2207      	movs	r2, #7
 8001fcc:	4013      	ands	r3, r2
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4a15      	ldr	r2, [pc, #84]	@ (8002038 <HAL_RCC_ClockConfig+0x200>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ff2:	f000 f829 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8001ff6:	0001      	movs	r1, r0
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	220f      	movs	r2, #15
 8002000:	401a      	ands	r2, r3
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <HAL_RCC_ClockConfig+0x204>)
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	58d3      	ldr	r3, [r2, r3]
 8002008:	221f      	movs	r2, #31
 800200a:	4013      	ands	r3, r2
 800200c:	000a      	movs	r2, r1
 800200e:	40da      	lsrs	r2, r3
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_RCC_ClockConfig+0x208>)
 8002012:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002014:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <HAL_RCC_ClockConfig+0x20c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fe5f 	bl	8000cdc <HAL_InitTick>
 800201e:	0003      	movs	r3, r0
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40022000 	.word	0x40022000
 800202c:	00001388 	.word	0x00001388
 8002030:	40021000 	.word	0x40021000
 8002034:	fffff0ff 	.word	0xfffff0ff
 8002038:	ffff8fff 	.word	0xffff8fff
 800203c:	08003734 	.word	0x08003734
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800204e:	4b3c      	ldr	r3, [pc, #240]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2238      	movs	r2, #56	@ 0x38
 8002054:	4013      	ands	r3, r2
 8002056:	d10f      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002058:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0adb      	lsrs	r3, r3, #11
 800205e:	2207      	movs	r2, #7
 8002060:	4013      	ands	r3, r2
 8002062:	2201      	movs	r2, #1
 8002064:	409a      	lsls	r2, r3
 8002066:	0013      	movs	r3, r2
 8002068:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800206a:	6839      	ldr	r1, [r7, #0]
 800206c:	4835      	ldr	r0, [pc, #212]	@ (8002144 <HAL_RCC_GetSysClockFreq+0xfc>)
 800206e:	f7fe f849 	bl	8000104 <__udivsi3>
 8002072:	0003      	movs	r3, r0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e05d      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002078:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2238      	movs	r2, #56	@ 0x38
 800207e:	4013      	ands	r3, r2
 8002080:	2b08      	cmp	r3, #8
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e054      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208a:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2238      	movs	r2, #56	@ 0x38
 8002090:	4013      	ands	r3, r2
 8002092:	2b10      	cmp	r3, #16
 8002094:	d138      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002096:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2203      	movs	r2, #3
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a0:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d10d      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	4823      	ldr	r0, [pc, #140]	@ (8002144 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020b8:	f7fe f824 	bl	8000104 <__udivsi3>
 80020bc:	0003      	movs	r3, r0
 80020be:	0019      	movs	r1, r3
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	227f      	movs	r2, #127	@ 0x7f
 80020c8:	4013      	ands	r3, r2
 80020ca:	434b      	muls	r3, r1
 80020cc:	617b      	str	r3, [r7, #20]
        break;
 80020ce:	e00d      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	481c      	ldr	r0, [pc, #112]	@ (8002144 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020d4:	f7fe f816 	bl	8000104 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	0019      	movs	r1, r3
 80020dc:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	227f      	movs	r2, #127	@ 0x7f
 80020e4:	4013      	ands	r3, r2
 80020e6:	434b      	muls	r3, r1
 80020e8:	617b      	str	r3, [r7, #20]
        break;
 80020ea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0f5b      	lsrs	r3, r3, #29
 80020f2:	2207      	movs	r2, #7
 80020f4:	4013      	ands	r3, r2
 80020f6:	3301      	adds	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	6978      	ldr	r0, [r7, #20]
 80020fe:	f7fe f801 	bl	8000104 <__udivsi3>
 8002102:	0003      	movs	r3, r0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	e015      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002108:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2238      	movs	r2, #56	@ 0x38
 800210e:	4013      	ands	r3, r2
 8002110:	2b20      	cmp	r3, #32
 8002112:	d103      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2238      	movs	r2, #56	@ 0x38
 8002122:	4013      	ands	r3, r2
 8002124:	2b18      	cmp	r3, #24
 8002126:	d103      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002128:	23fa      	movs	r3, #250	@ 0xfa
 800212a:	01db      	lsls	r3, r3, #7
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e001      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002134:	693b      	ldr	r3, [r7, #16]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b006      	add	sp, #24
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	40021000 	.word	0x40021000
 8002144:	00f42400 	.word	0x00f42400

08002148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b02      	ldr	r3, [pc, #8]	@ (8002158 <HAL_RCC_GetHCLKFreq+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	20000000 	.word	0x20000000

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b5b0      	push	{r4, r5, r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002160:	f7ff fff2 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002164:	0004      	movs	r4, r0
 8002166:	f7ff fb41 	bl	80017ec <LL_RCC_GetAPB1Prescaler>
 800216a:	0003      	movs	r3, r0
 800216c:	0b1a      	lsrs	r2, r3, #12
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	58d3      	ldr	r3, [r2, r3]
 8002174:	221f      	movs	r2, #31
 8002176:	4013      	ands	r3, r2
 8002178:	40dc      	lsrs	r4, r3
 800217a:	0023      	movs	r3, r4
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	08003774 	.word	0x08003774

08002188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002190:	2313      	movs	r3, #19
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002198:	2312      	movs	r3, #18
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d100      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021ac:	e0a3      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2011      	movs	r0, #17
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4ba5      	ldr	r3, [pc, #660]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	055b      	lsls	r3, r3, #21
 80021be:	4013      	ands	r3, r2
 80021c0:	d110      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4ba2      	ldr	r3, [pc, #648]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c6:	4ba1      	ldr	r3, [pc, #644]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	0549      	lsls	r1, r1, #21
 80021cc:	430a      	orrs	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021d0:	4b9e      	ldr	r3, [pc, #632]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	183b      	adds	r3, r7, r0
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e4:	4b9a      	ldr	r3, [pc, #616]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b99      	ldr	r3, [pc, #612]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021ea:	2180      	movs	r1, #128	@ 0x80
 80021ec:	0049      	lsls	r1, r1, #1
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fdcf 	bl	8000d94 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021fa:	e00b      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fc:	f7fe fdca 	bl	8000d94 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d904      	bls.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800220a:	2313      	movs	r3, #19
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2203      	movs	r2, #3
 8002210:	701a      	strb	r2, [r3, #0]
        break;
 8002212:	e005      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002214:	4b8e      	ldr	r3, [pc, #568]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4013      	ands	r3, r2
 800221e:	d0ed      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002220:	2313      	movs	r3, #19
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d154      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800222a:	4b88      	ldr	r3, [pc, #544]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800222c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800222e:	23c0      	movs	r3, #192	@ 0xc0
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4013      	ands	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d019      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	429a      	cmp	r2, r3
 8002244:	d014      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002246:	4b81      	ldr	r3, [pc, #516]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	4a82      	ldr	r2, [pc, #520]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800224c:	4013      	ands	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002250:	4b7e      	ldr	r3, [pc, #504]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002252:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002254:	4b7d      	ldr	r3, [pc, #500]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002256:	2180      	movs	r1, #128	@ 0x80
 8002258:	0249      	lsls	r1, r1, #9
 800225a:	430a      	orrs	r2, r1
 800225c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800225e:	4b7b      	ldr	r3, [pc, #492]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002260:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002262:	4b7a      	ldr	r3, [pc, #488]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002264:	497c      	ldr	r1, [pc, #496]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002266:	400a      	ands	r2, r1
 8002268:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800226a:	4b78      	ldr	r3, [pc, #480]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2201      	movs	r2, #1
 8002274:	4013      	ands	r3, r2
 8002276:	d016      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fd8c 	bl	8000d94 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	e00c      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fd87 	bl	8000d94 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	4a73      	ldr	r2, [pc, #460]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d904      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002292:	2313      	movs	r3, #19
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2203      	movs	r2, #3
 8002298:	701a      	strb	r2, [r3, #0]
            break;
 800229a:	e004      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229c:	4b6b      	ldr	r3, [pc, #428]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800229e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d0ed      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022a6:	2313      	movs	r3, #19
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b0:	4b66      	ldr	r3, [pc, #408]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	4a67      	ldr	r2, [pc, #412]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022be:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022c4:	e00c      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c6:	2312      	movs	r3, #18
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2213      	movs	r2, #19
 80022cc:	18ba      	adds	r2, r7, r2
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e005      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d4:	2312      	movs	r3, #18
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2213      	movs	r2, #19
 80022da:	18ba      	adds	r2, r7, r2
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e0:	2311      	movs	r3, #17
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b58      	ldr	r3, [pc, #352]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ee:	4b57      	ldr	r3, [pc, #348]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022f0:	495b      	ldr	r1, [pc, #364]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002300:	4b52      	ldr	r3, [pc, #328]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	2203      	movs	r2, #3
 8002306:	4393      	bics	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4b4f      	ldr	r3, [pc, #316]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002310:	430a      	orrs	r2, r1
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2210      	movs	r2, #16
 800231a:	4013      	ands	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800231e:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	4a50      	ldr	r2, [pc, #320]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	4b47      	ldr	r3, [pc, #284]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800232e:	430a      	orrs	r2, r1
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4013      	ands	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233e:	4b43      	ldr	r3, [pc, #268]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	4a49      	ldr	r2, [pc, #292]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	4b3f      	ldr	r3, [pc, #252]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800234e:	430a      	orrs	r2, r1
 8002350:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800235e:	4b3b      	ldr	r3, [pc, #236]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	4a42      	ldr	r2, [pc, #264]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	4b37      	ldr	r3, [pc, #220]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800236e:	430a      	orrs	r2, r1
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2220      	movs	r2, #32
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237c:	4b33      	ldr	r3, [pc, #204]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	4a3b      	ldr	r2, [pc, #236]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	4b30      	ldr	r3, [pc, #192]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800238c:	430a      	orrs	r2, r1
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	01db      	lsls	r3, r3, #7
 8002398:	4013      	ands	r3, r2
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239c:	4b2b      	ldr	r3, [pc, #172]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800239e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	0899      	lsrs	r1, r3, #2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	4b28      	ldr	r3, [pc, #160]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69da      	ldr	r2, [r3, #28]
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	05db      	lsls	r3, r3, #23
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0249      	lsls	r1, r1, #9
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	039b      	lsls	r3, r3, #14
 80023d0:	4013      	ands	r3, r2
 80023d2:	d016      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d8:	4a26      	ldr	r2, [pc, #152]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	03db      	lsls	r3, r3, #15
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d106      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023f4:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023fa:	2180      	movs	r1, #128	@ 0x80
 80023fc:	0449      	lsls	r1, r1, #17
 80023fe:	430a      	orrs	r2, r1
 8002400:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4013      	ands	r3, r2
 800240c:	d016      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800240e:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002412:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800241e:	430a      	orrs	r2, r1
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	01db      	lsls	r3, r3, #7
 800242a:	429a      	cmp	r2, r3
 800242c:	d106      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002434:	2180      	movs	r1, #128	@ 0x80
 8002436:	0249      	lsls	r1, r1, #9
 8002438:	430a      	orrs	r2, r1
 800243a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800243c:	2312      	movs	r3, #18
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	781b      	ldrb	r3, [r3, #0]
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b006      	add	sp, #24
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
 8002454:	fffffcff 	.word	0xfffffcff
 8002458:	fffeffff 	.word	0xfffeffff
 800245c:	00001388 	.word	0x00001388
 8002460:	efffffff 	.word	0xefffffff
 8002464:	fffff3ff 	.word	0xfffff3ff
 8002468:	fff3ffff 	.word	0xfff3ffff
 800246c:	ffcfffff 	.word	0xffcfffff
 8002470:	ffffcfff 	.word	0xffffcfff
 8002474:	ffbfffff 	.word	0xffbfffff
 8002478:	ffff3fff 	.word	0xffff3fff

0800247c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	429a      	cmp	r2, r3
 8002490:	d136      	bne.n	8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002492:	4bcd      	ldr	r3, [pc, #820]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002494:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002496:	23c0      	movs	r3, #192	@ 0xc0
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800249e:	4bca      	ldr	r3, [pc, #808]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d108      	bne.n	80024bc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d103      	bne.n	80024bc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e26b      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80024bc:	4bc2      	ldr	r3, [pc, #776]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c0:	2202      	movs	r2, #2
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d108      	bne.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d103      	bne.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80024d2:	23fa      	movs	r3, #250	@ 0xfa
 80024d4:	01db      	lsls	r3, r3, #7
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e25c      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80024da:	4bbb      	ldr	r3, [pc, #748]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	401a      	ands	r2, r3
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d000      	beq.n	80024ee <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80024ec:	e252      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	23c0      	movs	r3, #192	@ 0xc0
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d000      	beq.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80024f8:	e24c      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 80024fa:	4bb4      	ldr	r3, [pc, #720]	@ (80027cc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e249      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8002500:	4bb1      	ldr	r3, [pc, #708]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	2b02      	cmp	r3, #2
 800250a:	d102      	bne.n	8002512 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800250c:	4bb0      	ldr	r3, [pc, #704]	@ (80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	e00a      	b.n	8002528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8002512:	4bad      	ldr	r3, [pc, #692]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2203      	movs	r2, #3
 8002518:	4013      	ands	r3, r2
 800251a:	2b03      	cmp	r3, #3
 800251c:	d102      	bne.n	8002524 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800251e:	4bac      	ldr	r3, [pc, #688]	@ (80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e001      	b.n	8002528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002528:	4ba7      	ldr	r3, [pc, #668]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	2207      	movs	r2, #7
 8002530:	4013      	ands	r3, r2
 8002532:	3301      	adds	r3, #1
 8002534:	0019      	movs	r1, r3
 8002536:	6938      	ldr	r0, [r7, #16]
 8002538:	f7fd fde4 	bl	8000104 <__udivsi3>
 800253c:	0003      	movs	r3, r0
 800253e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	039b      	lsls	r3, r3, #14
 8002546:	429a      	cmp	r2, r3
 8002548:	d100      	bne.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800254a:	e1e3      	b.n	8002914 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	039b      	lsls	r3, r3, #14
 8002552:	429a      	cmp	r2, r3
 8002554:	d900      	bls.n	8002558 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002556:	e20c      	b.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	01db      	lsls	r3, r3, #7
 800255e:	429a      	cmp	r2, r3
 8002560:	d100      	bne.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8002562:	e0a5      	b.n	80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	01db      	lsls	r3, r3, #7
 800256a:	429a      	cmp	r2, r3
 800256c:	d900      	bls.n	8002570 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800256e:	e200      	b.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	429a      	cmp	r2, r3
 8002578:	d100      	bne.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800257a:	e0fc      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	429a      	cmp	r2, r3
 8002584:	d900      	bls.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8002586:	e1f4      	b.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	429a      	cmp	r2, r3
 8002590:	d100      	bne.n	8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8002592:	e181      	b.n	8002898 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	2380      	movs	r3, #128	@ 0x80
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	429a      	cmp	r2, r3
 800259c:	d900      	bls.n	80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800259e:	e1e8      	b.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d100      	bne.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80025aa:	e135      	b.n	8002818 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d900      	bls.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80025b6:	e1dc      	b.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d100      	bne.n	80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80025be:	e0af      	b.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d900      	bls.n	80025c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80025c6:	e1d4      	b.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d003      	beq.n	80025d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d033      	beq.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80025d4:	e1cd      	b.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80025d6:	4b7c      	ldr	r3, [pc, #496]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80025d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025da:	2203      	movs	r2, #3
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 80025e6:	f7ff fdb9 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 80025ea:	0003      	movs	r3, r0
 80025ec:	617b      	str	r3, [r7, #20]
        break;
 80025ee:	e1c2      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d104      	bne.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 80025f6:	f7ff fd27 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 80025fa:	0003      	movs	r3, r0
 80025fc:	617b      	str	r3, [r7, #20]
        break;
 80025fe:	e1ba      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8002600:	4b71      	ldr	r3, [pc, #452]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	401a      	ands	r2, r3
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	429a      	cmp	r2, r3
 8002610:	d105      	bne.n	800261e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d102      	bne.n	800261e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8002618:	4b6d      	ldr	r3, [pc, #436]	@ (80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800261a:	617b      	str	r3, [r7, #20]
        break;
 800261c:	e1ab      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800261e:	4b6a      	ldr	r3, [pc, #424]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	2b02      	cmp	r3, #2
 8002628:	d000      	beq.n	800262c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800262a:	e1a4      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d000      	beq.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8002632:	e1a0      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	617b      	str	r3, [r7, #20]
        break;
 800263a:	e19c      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800263c:	4b62      	ldr	r3, [pc, #392]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800263e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002640:	23c0      	movs	r3, #192	@ 0xc0
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800264e:	f7ff fd85 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002652:	0003      	movs	r3, r0
 8002654:	617b      	str	r3, [r7, #20]
        break;
 8002656:	e190      	b.n	800297a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	429a      	cmp	r2, r3
 8002660:	d104      	bne.n	800266c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002662:	f7ff fcf1 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002666:	0003      	movs	r3, r0
 8002668:	617b      	str	r3, [r7, #20]
        break;
 800266a:	e186      	b.n	800297a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800266c:	4b56      	ldr	r3, [pc, #344]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	401a      	ands	r2, r3
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	429a      	cmp	r2, r3
 800267c:	d107      	bne.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	429a      	cmp	r2, r3
 8002686:	d102      	bne.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8002688:	4b51      	ldr	r3, [pc, #324]	@ (80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800268a:	617b      	str	r3, [r7, #20]
        break;
 800268c:	e175      	b.n	800297a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800268e:	4b4e      	ldr	r3, [pc, #312]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002692:	2202      	movs	r2, #2
 8002694:	4013      	ands	r3, r2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d000      	beq.n	800269c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800269a:	e16e      	b.n	800297a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	23c0      	movs	r3, #192	@ 0xc0
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d000      	beq.n	80026a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80026a6:	e168      	b.n	800297a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	617b      	str	r3, [r7, #20]
        break;
 80026ae:	e164      	b.n	800297a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80026b0:	4b45      	ldr	r3, [pc, #276]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	0f9b      	lsrs	r3, r3, #30
 80026b6:	079b      	lsls	r3, r3, #30
 80026b8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 80026c0:	f7ff fcc2 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 80026c4:	0003      	movs	r3, r0
 80026c6:	617b      	str	r3, [r7, #20]
        break;
 80026c8:	e159      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d102      	bne.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 80026d4:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80026d6:	617b      	str	r3, [r7, #20]
        break;
 80026d8:	e151      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	05db      	lsls	r3, r3, #23
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d000      	beq.n	80026e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80026e4:	e14b      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80026e6:	4b38      	ldr	r3, [pc, #224]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	025b      	lsls	r3, r3, #9
 80026ee:	4013      	ands	r3, r2
 80026f0:	d100      	bne.n	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80026f2:	e144      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80026f4:	4b34      	ldr	r3, [pc, #208]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	227f      	movs	r2, #127	@ 0x7f
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	435a      	muls	r2, r3
 8002706:	4b30      	ldr	r3, [pc, #192]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	0c5b      	lsrs	r3, r3, #17
 800270c:	211f      	movs	r1, #31
 800270e:	400b      	ands	r3, r1
 8002710:	3301      	adds	r3, #1
 8002712:	0019      	movs	r1, r3
 8002714:	0010      	movs	r0, r2
 8002716:	f7fd fcf5 	bl	8000104 <__udivsi3>
 800271a:	0003      	movs	r3, r0
 800271c:	617b      	str	r3, [r7, #20]
        break;
 800271e:	e12e      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002720:	4b29      	ldr	r3, [pc, #164]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002722:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002724:	23c0      	movs	r3, #192	@ 0xc0
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002732:	f7ff fd13 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002736:	0003      	movs	r3, r0
 8002738:	617b      	str	r3, [r7, #20]
        break;
 800273a:	e122      	b.n	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	429a      	cmp	r2, r3
 8002744:	d104      	bne.n	8002750 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8002746:	f7ff fc7f 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 800274a:	0003      	movs	r3, r0
 800274c:	617b      	str	r3, [r7, #20]
        break;
 800274e:	e118      	b.n	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	401a      	ands	r2, r3
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	429a      	cmp	r2, r3
 8002760:	d000      	beq.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8002762:	e10e      	b.n	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	019b      	lsls	r3, r3, #6
 800276a:	429a      	cmp	r2, r3
 800276c:	d000      	beq.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800276e:	e108      	b.n	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8002770:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8002772:	617b      	str	r3, [r7, #20]
        break;
 8002774:	e105      	b.n	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800277a:	23c0      	movs	r3, #192	@ 0xc0
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	429a      	cmp	r2, r3
 800278a:	d123      	bne.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800278c:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	4013      	ands	r3, r2
 8002796:	d100      	bne.n	800279a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8002798:	e0f5      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	227f      	movs	r2, #127	@ 0x7f
 80027a2:	4013      	ands	r3, r2
 80027a4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	435a      	muls	r2, r3
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0c5b      	lsrs	r3, r3, #17
 80027b2:	211f      	movs	r1, #31
 80027b4:	400b      	ands	r3, r1
 80027b6:	3301      	adds	r3, #1
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f7fd fca2 	bl	8000104 <__udivsi3>
 80027c0:	0003      	movs	r3, r0
 80027c2:	617b      	str	r3, [r7, #20]
        break;
 80027c4:	e0df      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	0007a120 	.word	0x0007a120
 80027d0:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 80027da:	f7ff fc35 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 80027de:	0003      	movs	r3, r0
 80027e0:	617b      	str	r3, [r7, #20]
        break;
 80027e2:	e0d0      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80027e4:	4b6e      	ldr	r3, [pc, #440]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	401a      	ands	r2, r3
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d107      	bne.n	8002806 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d102      	bne.n	8002806 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8002800:	4b68      	ldr	r3, [pc, #416]	@ (80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8002802:	617b      	str	r3, [r7, #20]
        break;
 8002804:	e0bf      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	23c0      	movs	r3, #192	@ 0xc0
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	429a      	cmp	r2, r3
 800280e:	d000      	beq.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8002810:	e0b9      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8002812:	4b65      	ldr	r3, [pc, #404]	@ (80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8002814:	617b      	str	r3, [r7, #20]
        break;
 8002816:	e0b6      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002818:	4b61      	ldr	r3, [pc, #388]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800281a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800281c:	23c0      	movs	r3, #192	@ 0xc0
 800281e:	031b      	lsls	r3, r3, #12
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800282a:	f7ff fc97 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 800282e:	0003      	movs	r3, r0
 8002830:	617b      	str	r3, [r7, #20]
        break;
 8002832:	e0aa      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8002834:	4b5a      	ldr	r3, [pc, #360]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d108      	bne.n	8002852 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	02db      	lsls	r3, r3, #11
 8002846:	429a      	cmp	r2, r3
 8002848:	d103      	bne.n	8002852 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 800284a:	23fa      	movs	r3, #250	@ 0xfa
 800284c:	01db      	lsls	r3, r3, #7
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e021      	b.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8002852:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	401a      	ands	r2, r3
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	2380      	movs	r3, #128	@ 0x80
 8002868:	031b      	lsls	r3, r3, #12
 800286a:	429a      	cmp	r2, r3
 800286c:	d102      	bne.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 800286e:	4b4d      	ldr	r3, [pc, #308]	@ (80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e010      	b.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8002874:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	2202      	movs	r2, #2
 800287a:	4013      	ands	r3, r2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d000      	beq.n	8002882 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8002880:	e083      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	23c0      	movs	r3, #192	@ 0xc0
 8002886:	031b      	lsls	r3, r3, #12
 8002888:	429a      	cmp	r2, r3
 800288a:	d000      	beq.n	800288e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800288c:	e07d      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	617b      	str	r3, [r7, #20]
        break;
 8002894:	e079      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8002896:	e078      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002898:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800289a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800289c:	23c0      	movs	r3, #192	@ 0xc0
 800289e:	039b      	lsls	r3, r3, #14
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 80028aa:	f7ff fc57 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 80028ae:	0003      	movs	r3, r0
 80028b0:	617b      	str	r3, [r7, #20]
        break;
 80028b2:	e06c      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80028b4:	4b3a      	ldr	r3, [pc, #232]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80028b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b8:	2202      	movs	r2, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d108      	bne.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	035b      	lsls	r3, r3, #13
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d103      	bne.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 80028ca:	23fa      	movs	r3, #250	@ 0xfa
 80028cc:	01db      	lsls	r3, r3, #7
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e01f      	b.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80028d2:	4b33      	ldr	r3, [pc, #204]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	401a      	ands	r2, r3
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	039b      	lsls	r3, r3, #14
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d102      	bne.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 80028ee:	4b2d      	ldr	r3, [pc, #180]	@ (80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e00e      	b.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80028f4:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	2202      	movs	r2, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d146      	bne.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	23c0      	movs	r3, #192	@ 0xc0
 8002904:	039b      	lsls	r3, r3, #14
 8002906:	429a      	cmp	r2, r3
 8002908:	d141      	bne.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	617b      	str	r3, [r7, #20]
        break;
 8002910:	e03d      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8002912:	e03c      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8002914:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002916:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	03db      	lsls	r3, r3, #15
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	03db      	lsls	r3, r3, #15
 8002926:	429a      	cmp	r2, r3
 8002928:	d11b      	bne.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800292a:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	045b      	lsls	r3, r3, #17
 8002932:	4013      	ands	r3, r2
 8002934:	d02d      	beq.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002936:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	227f      	movs	r2, #127	@ 0x7f
 800293e:	4013      	ands	r3, r2
 8002940:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	435a      	muls	r2, r3
 8002948:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0e5b      	lsrs	r3, r3, #25
 800294e:	2107      	movs	r1, #7
 8002950:	400b      	ands	r3, r1
 8002952:	3301      	adds	r3, #1
 8002954:	0019      	movs	r1, r3
 8002956:	0010      	movs	r0, r2
 8002958:	f7fd fbd4 	bl	8000104 <__udivsi3>
 800295c:	0003      	movs	r3, r0
 800295e:	617b      	str	r3, [r7, #20]
        break;
 8002960:	e017      	b.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d114      	bne.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002968:	f7ff fbf8 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 800296c:	0003      	movs	r3, r0
 800296e:	617b      	str	r3, [r7, #20]
        break;
 8002970:	e00f      	b.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	e00e      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	e00c      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	e00a      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	e008      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	e004      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	e002      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	e000      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002992:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8002994:	697b      	ldr	r3, [r7, #20]
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b006      	add	sp, #24
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	40021000 	.word	0x40021000
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	00bb8000 	.word	0x00bb8000

080029ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0a8      	b.n	8002b10 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	2382      	movs	r3, #130	@ 0x82
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d009      	beq.n	80029e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	61da      	str	r2, [r3, #28]
 80029d8:	e005      	b.n	80029e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	225d      	movs	r2, #93	@ 0x5d
 80029f0:	5c9b      	ldrb	r3, [r3, r2]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	225c      	movs	r2, #92	@ 0x5c
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7fd ffbc 	bl	8000980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	225d      	movs	r2, #93	@ 0x5d
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2140      	movs	r1, #64	@ 0x40
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	23e0      	movs	r3, #224	@ 0xe0
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d902      	bls.n	8002a32 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e002      	b.n	8002a38 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	015b      	lsls	r3, r3, #5
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	23f0      	movs	r3, #240	@ 0xf0
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d008      	beq.n	8002a56 <HAL_SPI_Init+0xaa>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	23e0      	movs	r3, #224	@ 0xe0
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d002      	beq.n	8002a56 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	2382      	movs	r3, #130	@ 0x82
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	2384      	movs	r3, #132	@ 0x84
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	400b      	ands	r3, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2102      	movs	r1, #2
 8002a72:	400b      	ands	r3, r1
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6999      	ldr	r1, [r3, #24]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	400b      	ands	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2138      	movs	r1, #56	@ 0x38
 8002a92:	400b      	ands	r3, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	401a      	ands	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	2204      	movs	r2, #4
 8002abc:	401a      	ands	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	2110      	movs	r1, #16
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002acc:	2108      	movs	r1, #8
 8002ace:	400b      	ands	r3, r1
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68d9      	ldr	r1, [r3, #12]
 8002ad6:	23f0      	movs	r3, #240	@ 0xf0
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	400b      	ands	r3, r1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	0011      	movs	r1, r2
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	015b      	lsls	r3, r3, #5
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4907      	ldr	r1, [pc, #28]	@ (8002b18 <HAL_SPI_Init+0x16c>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	225d      	movs	r2, #93	@ 0x5d
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b004      	add	sp, #16
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	fffff7ff 	.word	0xfffff7ff

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e04a      	b.n	8002bc4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	223d      	movs	r2, #61	@ 0x3d
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223c      	movs	r2, #60	@ 0x3c
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fd ffc5 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	@ 0x3d
 8002b4e:	2102      	movs	r1, #2
 8002b50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f000 f98d 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2248      	movs	r2, #72	@ 0x48
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223e      	movs	r2, #62	@ 0x3e
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	223f      	movs	r2, #63	@ 0x3f
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2240      	movs	r2, #64	@ 0x40
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2241      	movs	r2, #65	@ 0x41
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2242      	movs	r2, #66	@ 0x42
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2243      	movs	r2, #67	@ 0x43
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2244      	movs	r2, #68	@ 0x44
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2245      	movs	r2, #69	@ 0x45
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2246      	movs	r2, #70	@ 0x46
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2247      	movs	r2, #71	@ 0x47
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223d      	movs	r2, #61	@ 0x3d
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e04a      	b.n	8002c74 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	223d      	movs	r2, #61	@ 0x3d
 8002be2:	5c9b      	ldrb	r3, [r3, r2]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	223c      	movs	r2, #60	@ 0x3c
 8002bee:	2100      	movs	r1, #0
 8002bf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7fd ff23 	bl	8000a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223d      	movs	r2, #61	@ 0x3d
 8002bfe:	2102      	movs	r1, #2
 8002c00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	f000 f935 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2248      	movs	r2, #72	@ 0x48
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	223e      	movs	r2, #62	@ 0x3e
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	223f      	movs	r2, #63	@ 0x3f
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2240      	movs	r2, #64	@ 0x40
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2241      	movs	r2, #65	@ 0x41
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2242      	movs	r2, #66	@ 0x42
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2243      	movs	r2, #67	@ 0x43
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2244      	movs	r2, #68	@ 0x44
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2245      	movs	r2, #69	@ 0x45
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2246      	movs	r2, #70	@ 0x46
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2247      	movs	r2, #71	@ 0x47
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223d      	movs	r2, #61	@ 0x3d
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c88:	2317      	movs	r3, #23
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	223c      	movs	r2, #60	@ 0x3c
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0e5      	b.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	223c      	movs	r2, #60	@ 0x3c
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b14      	cmp	r3, #20
 8002caa:	d900      	bls.n	8002cae <HAL_TIM_PWM_ConfigChannel+0x32>
 8002cac:	e0d1      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	009a      	lsls	r2, r3, #2
 8002cb2:	4b70      	ldr	r3, [pc, #448]	@ (8002e74 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	0011      	movs	r1, r2
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 f95e 	bl	8002f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6999      	ldr	r1, [r3, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	619a      	str	r2, [r3, #24]
      break;
 8002cfa:	e0af      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f9bd 	bl	8003084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2180      	movs	r1, #128	@ 0x80
 8002d16:	0109      	lsls	r1, r1, #4
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4954      	ldr	r1, [pc, #336]	@ (8002e78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002d28:	400a      	ands	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6999      	ldr	r1, [r3, #24]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	021a      	lsls	r2, r3, #8
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	619a      	str	r2, [r3, #24]
      break;
 8002d40:	e08c      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fa18 	bl	8003180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2108      	movs	r1, #8
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69d9      	ldr	r1, [r3, #28]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	61da      	str	r2, [r3, #28]
      break;
 8002d82:	e06b      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fa79 	bl	8003284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2180      	movs	r1, #128	@ 0x80
 8002d9e:	0109      	lsls	r1, r1, #4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4932      	ldr	r1, [pc, #200]	@ (8002e78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69d9      	ldr	r1, [r3, #28]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	61da      	str	r2, [r3, #28]
      break;
 8002dc8:	e048      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 faba 	bl	800334c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2108      	movs	r1, #8
 8002de4:	430a      	orrs	r2, r1
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2104      	movs	r1, #4
 8002df4:	438a      	bics	r2, r1
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e0a:	e027      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	0011      	movs	r1, r2
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 faf3 	bl	8003400 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0109      	lsls	r1, r1, #4
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4910      	ldr	r1, [pc, #64]	@ (8002e78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e50:	e004      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002e52:	2317      	movs	r3, #23
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
      break;
 8002e5a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	223c      	movs	r2, #60	@ 0x3c
 8002e60:	2100      	movs	r1, #0
 8002e62:	5499      	strb	r1, [r3, r2]

  return status;
 8002e64:	2317      	movs	r3, #23
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b006      	add	sp, #24
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	08003794 	.word	0x08003794
 8002e78:	fffffbff 	.word	0xfffffbff

08002e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a37      	ldr	r2, [pc, #220]	@ (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d008      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a33      	ldr	r2, [pc, #204]	@ (8002f70 <TIM_Base_SetConfig+0xf4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2270      	movs	r2, #112	@ 0x70
 8002eaa:	4393      	bics	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	@ (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d014      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d00f      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a28      	ldr	r2, [pc, #160]	@ (8002f70 <TIM_Base_SetConfig+0xf4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a27      	ldr	r2, [pc, #156]	@ (8002f74 <TIM_Base_SetConfig+0xf8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a26      	ldr	r2, [pc, #152]	@ (8002f78 <TIM_Base_SetConfig+0xfc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	@ (8002f7c <TIM_Base_SetConfig+0x100>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a24      	ldr	r2, [pc, #144]	@ (8002f80 <TIM_Base_SetConfig+0x104>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	4393      	bics	r3, r2
 8002f02:	001a      	movs	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a11      	ldr	r2, [pc, #68]	@ (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0xbe>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <TIM_Base_SetConfig+0xfc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0xbe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a11      	ldr	r2, [pc, #68]	@ (8002f7c <TIM_Base_SetConfig+0x100>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d103      	bne.n	8002f42 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	611a      	str	r2, [r3, #16]
  }
}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b004      	add	sp, #16
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40002000 	.word	0x40002000
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	40014800 	.word	0x40014800
 8002f80:	fffffcff 	.word	0xfffffcff

08002f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4393      	bics	r3, r2
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800306c <TIM_OC1_SetConfig+0xe8>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4393      	bics	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	4393      	bics	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a24      	ldr	r2, [pc, #144]	@ (8003070 <TIM_OC1_SetConfig+0xec>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_OC1_SetConfig+0x6e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <TIM_OC1_SetConfig+0xf0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_OC1_SetConfig+0x6e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <TIM_OC1_SetConfig+0xf4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2204      	movs	r2, #4
 8003008:	4393      	bics	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a18      	ldr	r2, [pc, #96]	@ (8003070 <TIM_OC1_SetConfig+0xec>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <TIM_OC1_SetConfig+0xa0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a17      	ldr	r2, [pc, #92]	@ (8003074 <TIM_OC1_SetConfig+0xf0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_OC1_SetConfig+0xa0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a16      	ldr	r2, [pc, #88]	@ (8003078 <TIM_OC1_SetConfig+0xf4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d111      	bne.n	8003048 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4a15      	ldr	r2, [pc, #84]	@ (800307c <TIM_OC1_SetConfig+0xf8>)
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4a14      	ldr	r2, [pc, #80]	@ (8003080 <TIM_OC1_SetConfig+0xfc>)
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b006      	add	sp, #24
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	fffeff8f 	.word	0xfffeff8f
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40014400 	.word	0x40014400
 8003078:	40014800 	.word	0x40014800
 800307c:	fffffeff 	.word	0xfffffeff
 8003080:	fffffdff 	.word	0xfffffdff

08003084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	2210      	movs	r2, #16
 800309a:	4393      	bics	r3, r2
 800309c:	001a      	movs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003164 <TIM_OC2_SetConfig+0xe0>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <TIM_OC2_SetConfig+0xe4>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2220      	movs	r2, #32
 80030ce:	4393      	bics	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a22      	ldr	r2, [pc, #136]	@ (800316c <TIM_OC2_SetConfig+0xe8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10d      	bne.n	8003102 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2280      	movs	r2, #128	@ 0x80
 80030ea:	4393      	bics	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2240      	movs	r2, #64	@ 0x40
 80030fe:	4393      	bics	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a19      	ldr	r2, [pc, #100]	@ (800316c <TIM_OC2_SetConfig+0xe8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_OC2_SetConfig+0x96>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <TIM_OC2_SetConfig+0xec>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_OC2_SetConfig+0x96>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <TIM_OC2_SetConfig+0xf0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <TIM_OC2_SetConfig+0xf4>)
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4a15      	ldr	r2, [pc, #84]	@ (800317c <TIM_OC2_SetConfig+0xf8>)
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b006      	add	sp, #24
 8003162:	bd80      	pop	{r7, pc}
 8003164:	feff8fff 	.word	0xfeff8fff
 8003168:	fffffcff 	.word	0xfffffcff
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40014400 	.word	0x40014400
 8003174:	40014800 	.word	0x40014800
 8003178:	fffffbff 	.word	0xfffffbff
 800317c:	fffff7ff 	.word	0xfffff7ff

08003180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a31      	ldr	r2, [pc, #196]	@ (800325c <TIM_OC3_SetConfig+0xdc>)
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003260 <TIM_OC3_SetConfig+0xe0>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2203      	movs	r2, #3
 80031b4:	4393      	bics	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4a27      	ldr	r2, [pc, #156]	@ (8003264 <TIM_OC3_SetConfig+0xe4>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <TIM_OC3_SetConfig+0xe8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10d      	bne.n	80031fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	4a22      	ldr	r2, [pc, #136]	@ (800326c <TIM_OC3_SetConfig+0xec>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003270 <TIM_OC3_SetConfig+0xf0>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <TIM_OC3_SetConfig+0xe8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <TIM_OC3_SetConfig+0x92>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a1b      	ldr	r2, [pc, #108]	@ (8003274 <TIM_OC3_SetConfig+0xf4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_OC3_SetConfig+0x92>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a1a      	ldr	r2, [pc, #104]	@ (8003278 <TIM_OC3_SetConfig+0xf8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d113      	bne.n	800323a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4a19      	ldr	r2, [pc, #100]	@ (800327c <TIM_OC3_SetConfig+0xfc>)
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4a18      	ldr	r2, [pc, #96]	@ (8003280 <TIM_OC3_SetConfig+0x100>)
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	621a      	str	r2, [r3, #32]
}
 8003254:	46c0      	nop			@ (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b006      	add	sp, #24
 800325a:	bd80      	pop	{r7, pc}
 800325c:	fffffeff 	.word	0xfffffeff
 8003260:	fffeff8f 	.word	0xfffeff8f
 8003264:	fffffdff 	.word	0xfffffdff
 8003268:	40012c00 	.word	0x40012c00
 800326c:	fffff7ff 	.word	0xfffff7ff
 8003270:	fffffbff 	.word	0xfffffbff
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800
 800327c:	ffffefff 	.word	0xffffefff
 8003280:	ffffdfff 	.word	0xffffdfff

08003284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a24      	ldr	r2, [pc, #144]	@ (800332c <TIM_OC4_SetConfig+0xa8>)
 800329a:	401a      	ands	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a20      	ldr	r2, [pc, #128]	@ (8003330 <TIM_OC4_SetConfig+0xac>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <TIM_OC4_SetConfig+0xb0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003338 <TIM_OC4_SetConfig+0xb4>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a17      	ldr	r2, [pc, #92]	@ (800333c <TIM_OC4_SetConfig+0xb8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_OC4_SetConfig+0x70>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a16      	ldr	r2, [pc, #88]	@ (8003340 <TIM_OC4_SetConfig+0xbc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_OC4_SetConfig+0x70>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a15      	ldr	r2, [pc, #84]	@ (8003344 <TIM_OC4_SetConfig+0xc0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4a14      	ldr	r2, [pc, #80]	@ (8003348 <TIM_OC4_SetConfig+0xc4>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b006      	add	sp, #24
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	ffffefff 	.word	0xffffefff
 8003330:	feff8fff 	.word	0xfeff8fff
 8003334:	fffffcff 	.word	0xfffffcff
 8003338:	ffffdfff 	.word	0xffffdfff
 800333c:	40012c00 	.word	0x40012c00
 8003340:	40014400 	.word	0x40014400
 8003344:	40014800 	.word	0x40014800
 8003348:	ffffbfff 	.word	0xffffbfff

0800334c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a21      	ldr	r2, [pc, #132]	@ (80033e8 <TIM_OC5_SetConfig+0x9c>)
 8003362:	401a      	ands	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1d      	ldr	r2, [pc, #116]	@ (80033ec <TIM_OC5_SetConfig+0xa0>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <TIM_OC5_SetConfig+0xa4>)
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a15      	ldr	r2, [pc, #84]	@ (80033f4 <TIM_OC5_SetConfig+0xa8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <TIM_OC5_SetConfig+0x66>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a14      	ldr	r2, [pc, #80]	@ (80033f8 <TIM_OC5_SetConfig+0xac>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_OC5_SetConfig+0x66>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a13      	ldr	r2, [pc, #76]	@ (80033fc <TIM_OC5_SetConfig+0xb0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d109      	bne.n	80033c6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4a0c      	ldr	r2, [pc, #48]	@ (80033e8 <TIM_OC5_SetConfig+0x9c>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	621a      	str	r2, [r3, #32]
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b006      	add	sp, #24
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	fffeffff 	.word	0xfffeffff
 80033ec:	fffeff8f 	.word	0xfffeff8f
 80033f0:	fffdffff 	.word	0xfffdffff
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800

08003400 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a22      	ldr	r2, [pc, #136]	@ (80034a0 <TIM_OC6_SetConfig+0xa0>)
 8003416:	401a      	ands	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a1e      	ldr	r2, [pc, #120]	@ (80034a4 <TIM_OC6_SetConfig+0xa4>)
 800342c:	4013      	ands	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <TIM_OC6_SetConfig+0xa8>)
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a16      	ldr	r2, [pc, #88]	@ (80034ac <TIM_OC6_SetConfig+0xac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_OC6_SetConfig+0x68>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <TIM_OC6_SetConfig+0xb0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_OC6_SetConfig+0x68>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a14      	ldr	r2, [pc, #80]	@ (80034b4 <TIM_OC6_SetConfig+0xb4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d109      	bne.n	800347c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4a13      	ldr	r2, [pc, #76]	@ (80034b8 <TIM_OC6_SetConfig+0xb8>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	029b      	lsls	r3, r3, #10
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	ffefffff 	.word	0xffefffff
 80034a4:	feff8fff 	.word	0xfeff8fff
 80034a8:	ffdfffff 	.word	0xffdfffff
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800
 80034b8:	fffbffff 	.word	0xfffbffff

080034bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223c      	movs	r2, #60	@ 0x3c
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e050      	b.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223c      	movs	r2, #60	@ 0x3c
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	223d      	movs	r2, #61	@ 0x3d
 80034e0:	2102      	movs	r1, #2
 80034e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a21      	ldr	r2, [pc, #132]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a20      	ldr	r2, [pc, #128]	@ (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003502:	4013      	ands	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2270      	movs	r2, #112	@ 0x70
 8003514:	4393      	bics	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a14      	ldr	r2, [pc, #80]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00a      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	05db      	lsls	r3, r3, #23
 800353c:	429a      	cmp	r2, r3
 800353e:	d004      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a10      	ldr	r2, [pc, #64]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10c      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	4393      	bics	r3, r2
 8003550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	223d      	movs	r2, #61	@ 0x3d
 8003568:	2101      	movs	r1, #1
 800356a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	223c      	movs	r2, #60	@ 0x3c
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	40012c00 	.word	0x40012c00
 8003584:	ff0fffff 	.word	0xff0fffff
 8003588:	40000400 	.word	0x40000400

0800358c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	223c      	movs	r2, #60	@ 0x3c
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e06f      	b.n	8003688 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	223c      	movs	r2, #60	@ 0x3c
 80035ac:	2101      	movs	r1, #1
 80035ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	22ff      	movs	r2, #255	@ 0xff
 80035b4:	4393      	bics	r3, r2
 80035b6:	001a      	movs	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a33      	ldr	r2, [pc, #204]	@ (8003690 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80035c4:	401a      	ands	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a30      	ldr	r2, [pc, #192]	@ (8003694 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80035d2:	401a      	ands	r2, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a2e      	ldr	r2, [pc, #184]	@ (8003698 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80035e0:	401a      	ands	r2, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80035ee:	401a      	ands	r2, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a29      	ldr	r2, [pc, #164]	@ (80036a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80035fc:	401a      	ands	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a26      	ldr	r2, [pc, #152]	@ (80036a4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800360a:	401a      	ands	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a24      	ldr	r2, [pc, #144]	@ (80036a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003618:	401a      	ands	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003628:	401a      	ands	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1e      	ldr	r2, [pc, #120]	@ (80036b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d11c      	bne.n	8003676 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003640:	401a      	ands	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003646:	051b      	lsls	r3, r3, #20
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a1a      	ldr	r2, [pc, #104]	@ (80036b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003650:	401a      	ands	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a17      	ldr	r2, [pc, #92]	@ (80036bc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800365e:	401a      	ands	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a15      	ldr	r2, [pc, #84]	@ (80036c0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800366c:	401a      	ands	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	223c      	movs	r2, #60	@ 0x3c
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}
 8003690:	fffffcff 	.word	0xfffffcff
 8003694:	fffffbff 	.word	0xfffffbff
 8003698:	fffff7ff 	.word	0xfffff7ff
 800369c:	ffffefff 	.word	0xffffefff
 80036a0:	ffffdfff 	.word	0xffffdfff
 80036a4:	ffffbfff 	.word	0xffffbfff
 80036a8:	fff0ffff 	.word	0xfff0ffff
 80036ac:	efffffff 	.word	0xefffffff
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	ff0fffff 	.word	0xff0fffff
 80036b8:	feffffff 	.word	0xfeffffff
 80036bc:	fdffffff 	.word	0xfdffffff
 80036c0:	dfffffff 	.word	0xdfffffff

080036c4 <memset>:
 80036c4:	0003      	movs	r3, r0
 80036c6:	1882      	adds	r2, r0, r2
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d100      	bne.n	80036ce <memset+0xa>
 80036cc:	4770      	bx	lr
 80036ce:	7019      	strb	r1, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	e7f9      	b.n	80036c8 <memset+0x4>

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	2600      	movs	r6, #0
 80036d8:	4c0c      	ldr	r4, [pc, #48]	@ (800370c <__libc_init_array+0x38>)
 80036da:	4d0d      	ldr	r5, [pc, #52]	@ (8003710 <__libc_init_array+0x3c>)
 80036dc:	1b64      	subs	r4, r4, r5
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	42a6      	cmp	r6, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	2600      	movs	r6, #0
 80036e6:	f000 f819 	bl	800371c <_init>
 80036ea:	4c0a      	ldr	r4, [pc, #40]	@ (8003714 <__libc_init_array+0x40>)
 80036ec:	4d0a      	ldr	r5, [pc, #40]	@ (8003718 <__libc_init_array+0x44>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	42a6      	cmp	r6, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	00b3      	lsls	r3, r6, #2
 80036fa:	58eb      	ldr	r3, [r5, r3]
 80036fc:	4798      	blx	r3
 80036fe:	3601      	adds	r6, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	00b3      	lsls	r3, r6, #2
 8003704:	58eb      	ldr	r3, [r5, r3]
 8003706:	4798      	blx	r3
 8003708:	3601      	adds	r6, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	080037e8 	.word	0x080037e8
 8003710:	080037e8 	.word	0x080037e8
 8003714:	080037ec 	.word	0x080037ec
 8003718:	080037e8 	.word	0x080037e8

0800371c <_init>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr

08003728 <_fini>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr
